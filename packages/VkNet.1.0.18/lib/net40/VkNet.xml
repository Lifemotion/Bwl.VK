<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VkNet</name>
    </assembly>
    <members>
        <member name="T:VkNet.Categories.AccountCategory">
            <summary>
            Методы этого класса позволяют производить действия с аккаунтом пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetCounters(VkNet.Enums.Filters.CountersFilter)">
            <summary>
            Возвращает ненулевые значения счетчиков пользователя.
            </summary>
            <param name="filter">Счетчики, информацию о которых нужно вернуть.</param>
            <returns>Возвращает объект, который содержит ненулевые значения счетчиков, или null, если все значения нулевые. Равные нулю счетчики не устанавливаются независимо от их наличия в <paramref name="filter"/>.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetNameInMenu(System.String)">
            <summary>
            Устанавливает короткое название приложения (до 17 символов), которое выводится пользователю в левом меню.
            Это происходит только в том случае, если пользователь добавил приложение в левое меню со страницы приложения, списка приложений или настроек. 
            </summary>
            <param name="name">Короткое название приложения (до 17 символов).</param>
            <returns>Возвращает результат установки короткого названия.</returns>
            <remarks>Если пользователь не установил приложение в левое меню, метод вернет ошибку 148 (Access to the menu of the user denied).</remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOnline(System.Nullable{System.Boolean})">
            <summary>
            Помечает текущего пользователя как online на 15 минут. 
            </summary>
            <returns>Возвращает значение, показывающее, успешно ли выполнился метод.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOffline">
            <summary>
            Помечает текущего пользователя как offline.
            </summary>
            <returns>Возвращает значение, показывающее, успешно ли выполнился метод.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.RegisterDevice(System.String,System.String,System.String,System.Nullable{System.Boolean},VkNet.Enums.Filters.SubscribeFilter)">
            <summary>
            Подписывает устройство на базе iOS, Android или Windows Phone на получение Push-уведомлений. 
            </summary>
            <param name="token">Идентификатор устройства, используемый для отправки уведомлений. (для mpns идентификатор должен представлять из себя URL для отправки уведомлений)</param>
            <param name="deviceModel">Строковое название модели устройства.</param>
            <param name="systemVersion">Строковая версия операционной системы устройства.</param>
            <param name="noText">Не передавать текст сообщения в push уведомлении. (по умолчанию текст передается)</param>
            <param name="subscribe">Список типов уведомлений, которые следует присылать. По умолчанию присылаются: <see cref="F:VkNet.Enums.Filters.SubscribeFilter.Message"/>, <see cref="F:VkNet.Enums.Filters.SubscribeFilter.Friend"/>.</param>
            <returns>Возвращает результат выполнения метода.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnregisterDevice(System.String)">
            <summary>
            Отписывает устройство от Push уведомлений. 
            </summary>
            <param name="token">Идентификатор устройства.</param>
            <returns>Возвращает результат выполнения метода.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetSilenceMode(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Отключает push-уведомления на заданный промежуток времени.
            </summary>
            <param name="token">Идентификатор устройства для сервиса push уведомлений.</param>
            <param name="time">Время в секундах на которое требуется отключить уведомления. (-1 - отключить навсегда)</param>
            <param name="chatID">Идентификатор чата, для которого следует отключить уведомления.</param>
            <param name="userID">Идентификатор пользователя, для которого следует отключить уведомления.</param>
            <param name="sound">Включить звук в данном диалоге. (параметр работает только если указан <paramref name="userID"/> или <paramref name="chatID"/> )</param>
            <returns>Возвращает результат выполнения метода.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.BanUser(System.Int32)">
            <summary>
            Добавляет пользователя в черный список. 
            </summary>
            <param name="userId">Идентификатор пользователя, которого нужно добавить в черный список. (положительное число)</param>
            <returns>Возвращает результат выполнения метода.</returns>
            <remarks>Если указанный пользователь является другом текущего пользователя или имеет от него входящую или исходящую заявку в друзья, то для добавления пользователя в черный список Ваше приложение должно иметь права: <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.</remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnbanUser(System.Int32)">
            <summary>
            Убирает пользователя из черного списка. 
            </summary>
            <param name="userId">Идентификатор пользователя, которого нужно убрать из черного списка. (положительное число)</param>
            <returns>Возвращает результат выполнения метода.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetBanned(System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, находящихся в черном списке. 
            </summary>
            <param name="total">Возвращает общее количество находящихся в черном списке пользователей.</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества черного списка. (положительное число) </param>
            <param name="count">Количество записей, которое необходимо вернуть. (положительное число, по умолчанию - 20, максимальное значение - 200) </param>
            <returns>Возвращает набор объектов пользователей, находящихся в черном списке. </returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetInfo">
            <summary>
            Возвращает информацию о текущем аккаунте. 
            </summary>
            <returns>Возвращает информацию об аккаунте или null, если сервер присылает пустой ответ.</returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetInfo(System.Nullable{System.Int32})">
            <summary>
            Позволяет редактировать информацию о текущем аккаунте. 
            </summary>
            <param name="intro">Битовая маска, отвечающая за прохождение обучения в мобильных клиентах. (положительное число)</param>
            <returns>Возвращает результат выполнения метода.</returns>
            <remarks>Если параметр <paramref name="intro"/> не установлен, он сбрасывается на 0.</remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetProfileInfo">
            <summary>
            Возвращает информацию о текущем профиле.
            </summary>
            <returns>Информация о текущем профиле в виде <see cref="T:VkNet.Model.User"/></returns>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfo(System.Int32)">
            <summary>
            Редактирует информацию текущего профиля. 
            </summary>
            <param name="cancelRequestId">Идентификатор заявки на смену имени, которую необходимо отменить.</param>
            <returns>Результат отмены заявки.</returns>
            <remarks>Метод вынесен как отдельный, потому что если в запросе передан параметр <paramref name="cancelRequestId"/>, все остальные параметры игнорируются.</remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfo(System.String,System.String,System.String,System.Nullable{VkNet.Enums.Sex},System.Nullable{VkNet.Enums.RelationType},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{VkNet.Enums.BirthdayVisibility},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
             Редактирует информацию текущего профиля.
            </summary>
            <param name="firstName">Имя пользователя</param>
            <param name="lastName">Фамилия пользователя</param>
            <param name="maidenName">Девичья фамилия пользователя</param>
            <param name="sex">Пол пользователя</param>
            <param name="relation">Семейное положение пользователя</param>
            <param name="relationPartnerId">Идентификатор пользователя, с которым связано семейное положение</param>
            <param name="birthDate">Дата рождения пользователя</param>
            <param name="birthDateVisibility">Видимость даты рождения</param>
            <param name="homeTown">Родной город пользователя</param>
            <param name="countryId">Идентификатор страны пользователя</param>
            <param name="cityId">Идентификатор города пользователя</param>
            <returns>Результат выполнения операции.</returns>
            <remarks> Если передаются <paramref name="firstName"/> или <paramref name="lastName"/>, рекомендуется 
            использовать перегрузку с соотвествующим out параметром типа <see cref="T:VkNet.Model.ChangeNameRequest"/> для получения объекта заявки на смену имени.</remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfo(VkNet.Model.ChangeNameRequest@,System.String,System.String,System.String,System.Nullable{VkNet.Enums.Sex},System.Nullable{VkNet.Enums.RelationType},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{VkNet.Enums.BirthdayVisibility},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
             Редактирует информацию текущего профиля.
            </summary>
            <param name="changeNameRequest">Если в параметрах передавалось имя или фамилия пользователя, 
            в этом параметре будет возвращен объект типа <see cref="T:VkNet.Model.ChangeNameRequest"/>, содержащий информацию о заявке на смену имени.</param>
            <param name="firstName">Имя пользователя</param>
            <param name="lastName">Фамилия пользователя</param>
            <param name="maidenName">Девичья фамилия пользователя</param>
            <param name="sex">Пол пользователя</param>
            <param name="relation">Семейное положение пользователя</param>
            <param name="relationPartnerId">Идентификатор пользователя, с которым связано семейное положение</param>
            <param name="birthDate">Дата рождения пользователя</param>
            <param name="birthDateVisibility">Видимость даты рождения</param>
            <param name="homeTown">Родной город пользователя</param>
            <param name="countryId">Идентификатор страны пользователя</param>
            <param name="cityId">Идентификатор города пользователя</param>
            <returns>Результат выполнения операции.</returns>
        </member>
        <member name="T:VkNet.Categories.AudioCategory">
            <summary>
            Методы для работы с аудиозаписями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetCount(System.Int64)">
            <summary>
            Возвращает количество аудиозаписей пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор владельца аудиозаписей (пользователь или сообщество). 
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — 
            например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1) 
            </param>
            <returns>
            Возвращает число, равное количеству аудиозаписей на странице пользователя или группы.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getCount"/>.
            </remarks>
            <example>
            Получим количество аудиозаписей Павла Дурова.
            <code>
            int count = vk.Audio.GetCount(1);
            </code>
            </example>
            <example>
            Получим количество аудиозаписей в группе с id равным 2.
            <code>
            int count = vk.Audio.GetCount(-2);
            </code>
            </example>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetLyrics(System.Int64)">
            <summary>
            Возвращает текст аудиозаписи по идентификатору текста аудиозаписи (<see cref="P:VkNet.Model.Attachments.Audio.LyricsId"/>).
            Параметр <paramref name="lyricsId"/> может быть получен с помощью методов <see cref="M:VkNet.Categories.AudioCategory.Get(System.Int64,VkNet.Model.User@,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>,
            <see cref="M:VkNet.Categories.AudioCategory.GetById(System.Collections.Generic.IEnumerable{System.String})"/> или <see cref="M:VkNet.Categories.AudioCategory.Search(System.String,System.Int32@,System.Nullable{System.Boolean},System.Nullable{VkNet.Enums.AudioSort},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>.
            </summary>
            <param name="lyricsId">Идентификатор текста аудиозаписи, информацию о котором необходимо вернуть.</param>
            <returns>В случае успеха возвращает найденный текст адиозаписи. В качестве переводов строк в тексте используется \n.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getLyrics"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetById(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает информацию об аудиозаписях. 
            </summary>
            <param name="audios">
            Список строковых идентификаторов аудиозаписей в формате - {owner_id}_{audio_id}.
            Если аудиозапись принадлежит группе, то в качестве первого параметра используется -id группы. 
            Примеры возможных значений идентификаторов: "2_67859194", "-683495_39822725", "2_63937759".
            </param>
            <returns>
            В случае успеха возвращает информацию о запрошенных аудиозаписях пользователя (группы).
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetById(System.String[])">
            <summary>
            Возвращает информацию об аудиозаписях. 
            </summary>
            <param name="audios">
            Список строковых идентификаторов аудиозаписей в формате - {owner_id}_{audio_id}.
            Если аудиозапись принадлежит группе, то в качестве первого параметра используется -id группы. 
            Примеры возможных значений идентификаторов: "2_67859194", "-683495_39822725", "2_63937759".
            </param>
            <returns>
            В случае успеха возвращает информацию о запрошенных аудиозаписях пользователя (группы).
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetFromGroup(System.Int64,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список аудиозаписей группы.
            </summary>
            <param name="gid">Идентификатор группы, у которой необходимо получить аудиозаписи.</param>
            <param name="albumId">Идентификатор альбома, аудиозаписи которого необходимо вернуть (по умолчанию возвращаются аудиозаписи из всех альбомов).</param>
            <param name="aids">
            Список идентификаторов аудиозаписей группы, по которым необходимо получить информацию.
            Если список не указан (null), то ограничение на идентификаторы аудиозаписей на накладываются.
            </param>
            <param name="count">Требуемое количество аудиозаписей.</param>
            <param name="offset">Смещение относительно первой найденной аудиозаписи (для выборки определенного подмножества аудиозаписей).</param>
            <returns>
            В случае успеха возвращает затребованный список аудиозаписей группы.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Get(System.Int64,VkNet.Model.User@,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список аудиозаписей пользователя и краткую информацию о нем.
            </summary>
            <param name="uid">Идентификатор пользователя, у которого необходимо получить аудиозаписи.</param>
            <param name="user">Базовая информация о владельце аудиозаписей - пользователе с идентификатором <paramref name="uid"/> (идентификатор, имя, фотография).</param>
            <param name="albumId">Идентификатор альбома пользователя, аудиозаписи которого необходимо получить (по умолчанию возвращаются аудиозаписи из всех альбомов).</param>
            <param name="aids">Список идентификаторов аудиозаписей пользователя, по которым необходимо получить информацию.</param>
            <param name="count">Требуемое количество аудиозаписей.</param>
            <param name="offset">Смещение относительно первой найденной аудиозаписи (для выборки определенного подмножества).</param>
            <returns>
            В случае успеха возвращает затребованный список аудиозаписей пользователя.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Get(System.Int64,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список аудиозаписей пользователя.
            </summary>
            <param name="uid">Идентификатор пользователя, у которого необходимо получить аудиозаписи.</param>
            <param name="albumId">Идентификатор альбома пользователя, аудиозаписи которого необходимо получить (по умолчанию возвращаются аудиозаписи из всех альбомов).</param>
            <param name="aids">Список идентификаторов аудиозаписей пользователя, по которым необходимо получить информацию.</param>
            <param name="count">Требуемое количество аудиозаписей.</param>
            <param name="offset">Смещение относительно первой найденной аудиозаписи (для выборки определенного подмножества).</param>
            <returns>В случае успеха возвращает затребованный список аудиозаписей пользователя.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetUploadServer">
            <summary>
            Возвращает адрес сервера для загрузки аудиозаписей. 
            </summary>
            <returns>
            В случае успеха возвращает адрес сервера для загрузки аудиозаписей.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Search(System.String,System.Int32@,System.Nullable{System.Boolean},System.Nullable{VkNet.Enums.AudioSort},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список аудиозаписей в соответствии с заданным критерием поиска.
            </summary>
            <param name="query">Cтрока поискового запроса</param>
            <param name="totalCount">Общее количество аудиозаписей удовлетворяющих запросу</param>
            <param name="autoComplete">Если этот параметр равен true, возможные ошибки в поисковом запросе будут исправлены. Например, при поисковом запросе <strong>Иуфдуы</strong> поиск будет осуществляться по строке <strong>Beatles</strong></param>
            <param name="sort">Вид сортировки</param>
            <param name="findLyrics">Будет ли производиться только по тем аудиозаписям, которые содержат тексты.</param>
            <param name="count">Количество возвращаемых аудиозаписей (максимум 200).</param>
            <param name="offset">Смещение относительно первой найденной аудиозаписи для выборки определенного подмножества.</param>
            <returns>Список объектов класса Audio.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Add(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Копирует аудиозапись на страницу пользователя или группы. 
            </summary>
            <param name="audioId">id аудиозаписи</param>
            <param name="ownerId">id владельца аудиозаписи</param>
            <param name="groupId">id группы, в которую следует копировать аудиозапись. Если параметр не указан, аудиозапись копируется не в группу, а на страницу текущего пользователя.</param>
            <returns>Идентификатор созданной аудиозаписи</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.add"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет аудиозапись со страницы пользователя или группы.
            </summary>
            <param name="audioId">id аудиозаписи</param>
            <param name="ownerId">id владельца аудиозаписи</param>
            <returns>При успешном удалении аудиозаписи сервер вернет true</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Edit(System.Int64,System.Int64,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Редактирует данные аудиозаписи на странице пользователя или группы. 
            </summary>
            <param name="audioId">id аудиозаписи</param>
            <param name="ownerId">id владельца аудиозаписи. Если редактируемая аудиозапись находится на странице группы, в этом параметре должно стоять значение, равное -id группы.</param>
            <param name="artist">Название исполнителя аудиозаписи.</param>
            <param name="title">Название аудиозаписи.</param>
            <param name="text">Текст аудиозаписи, если введен.</param>
            <param name="noSearch">true - скрывает аудиозапись из поиска по аудиозаписям, false (по умолчанию) - не скрывает.</param>
            <returns>id текста, введенного пользователем</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.edit"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную аудиозапись пользователя после удаления.
            </summary>
            <param name="audioId">id удаленной аудиозаписи</param>
            <param name="ownerId">id владельца аудиозаписи</param>
            <returns>Удаленная аудиозапись.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.restore"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Reorder(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Изменяет порядок аудиозаписи, перенося ее между аудиозаписями, идентификаторы которых переданы параметрами after и before.
            </summary>
            <param name="audioId">id аудиозаписи, порядок которой изменяется</param>
            <param name="ownerId">id владельца изменяемой аудиозаписи</param>
            <param name="after">id аудиозаписи, после которой нужно поместить аудиозапись. Если аудиозапись переносится в начало, параметр может быть равен нулю.</param>
            <param name="before">id аудиозаписи, перед которой нужно поместить аудиозапись. Если аудиозапись переносится в конец, параметр может быть равен нулю.</param>
            <returns>При успешном изменении порядка аудиозаписи сервер вернет true</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Audio"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.reorder"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.AddAlbum(System.String,System.Nullable{System.Int64})">
            <summary>
            Создает пустой альбом аудиозаписей.
            </summary>
            <param name="title">название альбома</param>
            <param name="groupId">идентификатор сообщества (если альбом нужно создать в сообществе)</param>
            <returns>Идентификатор созданного альбома</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.addAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.EditAlbum(System.String,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Редактирует название альбома аудиозаписей.
            </summary>
            <param name="title">новое название для альбома</param>
            <param name="albumId">дентификатор альбома</param>
            <param name="groupId">идентификатор сообщества, которому принадлежит альбом</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.editAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет альбом аудиозаписей.
            </summary>
            <param name="albumId">идентификатор альбома</param>
            <param name="groupId">идентификатор сообщества, которому принадлежит альбом</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.deleteAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPopular(System.Boolean,System.Nullable{VkNet.Enums.AudioGenre},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список аудиозаписей из раздела "Популярное".
            </summary>
            <param name="onlyEng">true – возвращать только зарубежные аудиозаписи. false – возвращать все аудиозаписи. (по умолчанию) </param>
            <param name="genre">идентификатор жанра </param>
            <param name="count">количество возвращаемых аудиозаписей</param>
            <param name="offset">смещение, необходимое для выборки определенного подмножества аудиозаписей</param>
            <returns>Список аудиозаписей из раздела "Популярное"</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getPopular"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetAlbums(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список альбомов аудиозаписей пользователя или группы.
            </summary>
            <param name="ownerid">Идентификатор пользователя или сообщества, у которого необходимо получить список альбомов с аудио.</param>
            <param name="count">Количество альбомов, которое необходимо вернуть.</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества альбомов.</param>
            <returns>
            После успешного выполнения возвращает массив альбомов аудиоальбомов <see cref="T:VkNet.Model.AudioAlbum"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getAlbums"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.MoveToAlbum(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Перемещает аудиозаписи в альбом.
            </summary>
            <param name="albumId">идентификатор альбома, в который нужно переместить аудиозаписи</param>
            <param name="audioIds">идентификаторы аудиозаписей, которые требуется переместить</param>
            <param name="groupId">идентификатор сообщества, в котором размещены аудиозаписи. Если параметр не указан, работа ведется с аудиозаписями текущего пользователя</param>
            <returns>После успешного выполнения возвращает true</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.moveToAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetRecommendations(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.String)">
            <summary>
            Возвращает список рекомендуемых аудиозаписей на основе списка воспроизведения заданного пользователя или на основе одной выбранной аудиозаписи.
            </summary>
            <param name="userId">Идентификатор пользователя для получения списка рекомендаций на основе его набора аудиозаписей (по умолчанию — идентификатор 
            текущего пользователя).</param>
            <param name="count">Количество возвращаемых аудиозаписей.</param>
            <param name="offset">Смещение относительно первой найденной аудиозаписи для выборки определенного подмножества.</param>
            <param name="shuffle">true — включен случайный порядок.</param>
            <param name="targetAudio">Идентификатор аудиозаписи, на основе которой будет строиться список рекомендаций. Используется вместо параметра uid. 
            Идентификатор представляет из себя разделённые знаком подчеркивания id пользователя, которому принадлежит аудиозапись, и id самой аудиозаписи. 
            Если аудиозапись принадлежит сообществу, то в качестве первого параметра используется -id сообщества.</param>
            <returns>Список рекомендуемых аудиозаписей.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getRecommendations"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.SetBroadcast(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Транслирует аудиозапись в статус пользователю или сообществу.
            </summary>
            <param name="audio">Идентификатор аудиозаписи, которая будет отображаться в статусе, в формате owner_id_audio_id. Например, 1_190442705. 
            Если параметр не указан, аудиостатус указанных сообществ и пользователя будет удален.</param>
            <param name="targetIds">Перечисленные через запятую идентификаторы сообществ и пользователя, которым будет транслироваться аудиозапись. 
            Идентификаторы сообществ должны быть заданы в формате "-gid", где gid - идентификатор сообщества. Например, 1,-34384434. По умолчанию аудиозапись 
            транслируется текущему пользователю.</param>
            <returns>В случае успешного выполнения возвращает массив идентификаторов сообществ и пользователя, которым был установлен или удален аудиостатус.</returns>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Save(System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Сохраняет аудиозаписи после успешной загрузки.
            </summary>
            <param name="server">параметр, возвращаемый в результате загрузки аудиофайла на сервер. </param>
            <param name="audio">параметр, возвращаемый в результате загрузки аудиофайла на сервер.</param>
            <param name="hash">параметр, возвращаемый в результате загрузки аудиофайла на сервер.</param>
            <param name="artist">автор композиции. По умолчанию берется из ID3 тегов.</param>
            <param name="title">название композиции. По умолчанию берется из ID3 тегов. </param>
            <returns>Возвращает массив из объектов с загруженными аудиозаписями.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.save"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetBroadcastList">
            <summary>
            НЕ РЕАЛИЗОВАН!
            </summary>
        </member>
        <member name="T:VkNet.Categories.DocsCategory">
            <summary>
            Методы для работы с документами (получение списка, загрузка, удаление и т.д.)
            </summary>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Возвращает расширенную информацию о документах пользователя или сообщества.
            </summary>
            <param name="count">Количество документов, информацию о которых нужно вернуть. По умолчанию — все документы.</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества документов. Положительное число.</param>
            <param name="owner_id">Идентификатор пользователя или сообщества, которому принадлежат документы. Целое число, по умолчанию идентификатор текущего пользователя.</param>
            <returns>После успешного выполнения возвращает список объектов документов.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetById(System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.Document})">
            <summary>
            Возвращает информацию о документах по их идентификаторам.
            </summary>
            <param name="docs">Идентификаторы документов, информацию о которых нужно вернуть.</param>
            <returns>После успешного выполнения возвращает список объектов документов.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов. 
            </summary>
            <param name="group_id">Идентификатор сообщества (если необходимо загрузить документ в список документов сообщества). Если документ нужно загрузить в список пользователя, метод вызывается без дополнительных параметров. Положительное число</param>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.UploadServerInfo"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.getUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов в папку Отправленные, для последующей отправки документа на стену или личным сообщением. 
            </summary>
            <param name="group_id">Идентификатор сообщества, в которое нужно загрузить документ. Положительное число.</param>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.UploadServerInfo"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.getWallUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Save(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Сохраняет документ после его успешной загрузки на сервер.
            </summary>
            <param name="file">Параметр, возвращаемый в результате загрузки файла на сервер. Обязательный параметр.</param>
            <param name="title">Название документа.</param>
            <param name="tags">Метки для поиска.</param>
            <param name="captcha_sid">Id капчи (только если для вызова метода необходимо ввести капчу)</param>
            <param name="captcha_key">Текст капчи (только если для вызова метода необходимо ввести капчу)</param>
            <returns>Возвращает массив с загруженными объектами. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.save"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет документ пользователя или группы. 
            </summary>
            <param name="owner_id">идентификатор пользователя или сообщества, которому принадлежит документ. Целое число, обязательный параметр</param>
            <param name="doc_id">Идентификатор документа. Положительное число, обязательный параметр</param>
            <returns>После успешного выполнения возвращает 1. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Add(System.Int64,System.Int64,System.String)">
            <summary>
            Копирует документ в документы текущего пользователя.
            </summary>
            <param name="owner_id">Идентификатор пользователя или сообщества, которому принадлежит документ. Целое число, обязательный параметр</param>
            <param name="doc_id">Идентификатор документа. Положительное число, обязательный параметр</param>
            <param name="access_key">Ключ доступа документа. Этот параметр следует передать, если вместе с остальными данными о документе было возвращено поле access_key.</param>
            <returns>После успешного выполнения возвращает идентификатор созданного документа (did).</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/docs.add"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.GetList(VkNet.Enums.SafetyEnums.LikeObjectType,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Получает список идентификаторов пользователей, которые добавили заданный объект в свой список Мне нравится. 
            </summary>
            <param name="type">Тип объекта <see cref="T:VkNet.Enums.SafetyEnums.LikeObjectType"/></param>
            <param name="ownerId">Идентификатор владельца Like-объекта: id пользователя, id сообщества (со знаком «минус») или id приложения. Если параметр type равен sitepage, то в качестве owner_id необходимо передавать id приложения. Если параметр не задан, то считается, что он равен либо идентификатору текущего пользователя, либо идентификатору текущего приложения (если type равен sitepage). целое число</param>
            <param name="itemId">Идентификатор Like-объекта. Если type равен sitepage, то параметр item_id может содержать значение параметра page_id, используемый при инициализации  виджета «Мне нравится».</param>
            <param name="pageUrl">Url страницы, на которой установлен виджет «Мне нравится». Используется вместо параметра item_id. строка</param>
            <param name="filter">Указывает, следует ли вернуть всех пользователей, добавивших объект в список "Мне нравится" или только тех, которые рассказали о нем друзьям. Параметр может принимать следующие значения: 
            
            likes — возвращать информацию обо всех пользователях; 
            copies — возвращать информацию только о пользователях, рассказавших об объекте друзьям.
            По умолчанию возвращается информация обо всех пользователях. 
            строка</param>
            <param name="friendsOnly">Указывает, необходимо ли возвращать только пользователей, которые являются друзьями текущего пользователя. Параметр может принимать следующие значения: 
            
            0 — возвращать всех пользователей в порядке убывания времени добавления объекта; 
            1 — возвращать только друзей текущего пользователя в порядке убывания времени добавления объекта;
            Если метод был вызван без авторизации или параметр не был задан, то считается, что он равен 0. 
            флаг, может принимать значения 1 или 0</param>
            <param name="extended">1 — возвращать расширенную информацию о пользователях и сообществах из списка поставивших отметку «Мне нравится» или сделавших репост. По умолчанию — 0. флаг, может принимать значения 1 или 0</param>
            <param name="offset">Смещение, относительно начала списка, для выборки определенного подмножества. Если параметр не задан, то считается, что он равен 0. положительное число</param>
            <param name="count">Количество возвращаемых идентификаторов пользователей.
            Если параметр не задан, то считается, что он равен 100, если не задан параметр friends_only, в противном случае 10.
            Максимальное значение параметра 1000, если не задан параметр friends_only, в противном случае 100. положительное число</param>
            <returns>После успешного выполнения возвращает объект со следующими полями: 
            
            count — общее количество пользователей, которые добавили заданный объект в свой список Мне нравится. 
            items — список идентификаторов пользователей с учетом параметров offset и count, которые добавили заданный объект в свой список Мне нравится. 
            
            Если параметр type равен sitepage, то будет возвращён список пользователей, воспользовавшихся виджетом «Мне нравится» на внешнем сайте. Адрес страницы задаётся при помощи параметра page_url или item_id. 
            Если extended=1, дополнительно возвращается массив items, содержащий расширенную информацию о пользователях или сообществах. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/likes.getList"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.Add(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Добавляет указанный объект в список Мне нравится текущего пользователя. 
            </summary>
            <param name="type">Тип объекта <see cref="T:VkNet.Enums.SafetyEnums.LikeObjectType"/></param>
            <param name="itemId">Идентификатор объекта. положительное число, обязательный параметр</param>
            <param name="ownerId">Идентификатор владельца объекта. целое число, по умолчанию идентификатор текущего пользователя</param>
            <param name="accessKey">Ключ доступа в случае работы с приватными объектами. строка</param>
            <returns>В случае успеха возвращает объект с полем likes, в котором находится текущее количество пользователей, которые добавили данный объект в свой список Мне нравится. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/likes.add"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.Delete(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет указанный объект из списка Мне нравится текущего пользователя 
            </summary>
            <param name="type">Тип объекта <see cref="T:VkNet.Enums.SafetyEnums.LikeObjectType"/></param>
            <param name="itemId">Идентификатор объекта. положительное число, обязательный параметр</param>
            <param name="ownerId">Идентификатор владельца объекта. целое число, по умолчанию идентификатор текущего пользователя</param>
            <returns>В случае успеха возвращает объект с полем likes, в котором находится текущее количество пользователей, которые добавили данный объект в свой список Мне нравится. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/likes.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.IsLiked(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Boolean@,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Проверяет, находится ли объект в списке Мне нравится заданного пользователя. 
            </summary>
            <param name="type">Тип объекта <see cref="T:VkNet.Enums.SafetyEnums.LikeObjectType"/></param>
            <param name="itemId">Идентификатор объекта. положительное число, обязательный параметр</param>
            <param name="userId">Идентификатор пользователя, у которого необходимо проверить наличие объекта в списке «Мне нравится». Если параметр не задан, то считается, что он равен идентификатору текущего пользователя. положительное число, по умолчанию идентификатор текущего пользователя</param>
            <param name="ownerId">Идентификатор владельца Like-объекта. Если параметр не задан, то считается, что он равен идентификатору текущего пользователя. целое число, по умолчанию идентификатор текущего пользователя</param>
            <returns>В случае успеха возвращает одно из следующих числовых значений: 
            
            0 — указанный Like-объект не входит в список Мне нравится пользователя с идентификатором user_id. 
            1 — указанный Like-объект находится в списке Мне нравится пользователя с идентификатором user_id. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/likes.isLiked"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.PhotoCategory">
            <summary>
            Методы для работы с фотографиями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateAlbum(System.String,System.Nullable{System.Int64},System.String,System.Nullable{VkNet.Enums.CommentPrivacy},System.Nullable{VkNet.Enums.CommentPrivacy})">
            <summary>
            Создает пустой альбом для фотографий. 
            </summary>
            <param name="title">Название альбома</param>
            <param name="groupId">Идентификатор сообщества, в котором создаётся альбом. Для группы privacy  и comment_privacy могут принимать два значения: 0 — доступ для всех пользователей, 1 — доступ только для участников группы</param>
            <param name="description">Текст описания альбома</param>
            <param name="commentPrivacy">Уровень доступа к комментированию альбома</param>
            <param name="privacy">Уровень доступа к альбому</param>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.PhotoAlbum"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.createAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditAlbum(System.Int64,System.String,System.String,System.Nullable{System.Int64},System.Nullable{VkNet.Enums.CommentPrivacy},System.Nullable{VkNet.Enums.CommentPrivacy})">
            <summary>
            Редактирует данные альбома для фотографий пользователя. 
            </summary>
            <param name="albumId">Идентификатор альбома</param>
            <param name="title">Новое название альбома</param>
            <param name="description">Новый текст описания альбома</param>
            <param name="ownerId">Идентификатор владельца альбома (пользователь или сообщество). Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="privacy">Новый уровень доступа к альбому</param>
            <param name="commentPrivacy">новый уровень доступа к комментированию альбома</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.editAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbums(System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список альбомов пользователя или сообщества. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежат альбомы. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="albumIds">Перечисленные через запятую ID альбомов</param>
            <param name="offset">Cмещение, необходимое для выборки определенного подмножества альбомов</param>
            <param name="count">Количество альбомов, которое нужно вернуть</param>
            <param name="needSystem">true – будут возвращены системные альбомы, имеющие отрицательные идентификаторы.</param>
            <param name="needCovers">true — будет возвращено дополнительное поле thumb_src. По умолчанию поле thumb_src не возвращается</param>
            <param name="photoSizes">true — будут возвращены размеры фотографий в специальном формате</param>
            <returns>Возвращает список объектов <see cref="T:VkNet.Model.PhotoAlbum"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getAlbums"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},VkNet.Enums.SafetyEnums.PhotoFeedType,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список фотографий в альбоме. 
            </summary>
            <param name="ownerId">Идентификатор владельца альбома.
            <remarks>
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор текущего пользователя
            </remarks>
            </param>
            <param name="albumId">Идентификатор альбома. Для служебных альбомов используются следующие идентификаторы: 
            todo реализовать для следующих типов with PhotoAlbumType class
            wall — фотографии со стены; 
            profile — аватары; 
            saved — сохраненные фотографии. </param>
            <param name="photoIds">Идентификаторы фотографий, информацию о которых необходимо вернуть. список строк, разделенных через запятую</param>
            <param name="rev">Порядок сортировки фотографий (true — антихронологический, false — хронологический).</param>
            <param name="extended">True — будут возвращены дополнительные поля likes, comments, tags, can_comment. Поля comments и tags содержат только количество объектов. По умолчанию данные поля не возвращается.</param>
            <param name="feedType">Тип новости получаемый в поле type метода newsfeed.get, для получения только загруженных пользователем фотографий, либо только фотографий, на которых он был отмечен.</param>
            <param name="feed">Unixtime, который может быть получен методом newsfeed.get в поле date, для получения всех фотографий загруженных пользователем в определённый день либо на которых пользователь был отмечен. Также нужно указать параметр uid пользователя, с которым произошло событие. </param>
            <param name="photoSizes">Возвращать ли доступные размеры фотографии в специальном формате. флаг, может принимать значения 1 или 0</param>
            <param name="offset">Отступ, необходимый для получения определенного подмножества записей. положительное число</param>
            <param name="count">Количество записей, которое будет получено. положительное число, максимальное значение 1000</param>
            <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Photo"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbumsCount(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает количество доступных альбомов пользователя или сообщества. 
            </summary>
            <param name="userId">Идентификатор пользователя, количество альбомов которого необходимо получить.</param>
            <param name="groupId">Идентификатор сообщества, количество альбомов которого необходимо получить. </param>
            <returns>После успешного выполнения возвращает количество альбомов с учетом настроек приватности.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getAlbumsCount"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetProfile(System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список фотографий со страницы пользователя или сообщества. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, фотографии которого нужно получить. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoIds">Идентификаторы фотографий, информацию о которых необходимо вернуть</param>
            <param name="rev">порядок сортировки фотографий (1 — антихронологический, 0 — хронологический). флаг, может принимать значения 1 или 0</param>
            <param name="extended">1 — будет возвращено дополнительное поле likes. По умолчанию поле likes не возвращается. флаг, может принимать значения 1 или 0</param>
            <param name="feedType">Тип новости, получаемый в поле type метода newsfeed.get. строка</param>
            <param name="feed">Unixtime, который может быть получен методом newsfeed.get в поле date, для получения всех фотографий загруженных пользователем в определённый день либо на которых пользователь был отмечен. Также нужно указать параметр uid пользователя, с которым произошло событие</param>
            <param name="photoSizes">Возвращать ли размеры фотографий в специальном формате</param>
            <param name="count">Положительное число, максимальное значение 1000</param>
            <param name="offset">Положительное число</param>
            <returns>После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.Attachments.Photo"/>. В случае, если запись на стене о том, что была обновлена фотография профиля, не удалена, будет возвращено дополнительное поле post_id, содержащее идентификатор записи на стене.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getProfile"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию о фотографиях по их идентификаторам. 
            </summary>
            <param name="photos">Перечисленные через запятую идентификаторы, которые представляют собой идущие через знак подчеркивания id пользователей, разместивших фотографии, и id самих фотографий. Чтобы получить информацию о фотографии в альбоме группы, вместо id пользователя следует указать -id группы.
            <example>
            Пример значения photos: 1_129207899,6492_135055734, -20629724_271945303 
            </example>
            <remarks>
            Некоторые фотографии, идентификаторы которых могут быть получены через API, закрыты приватностью, и не будут получены. В этом случае следует использовать ключ доступа фотографии (access_key) в её идентификаторе. Пример значения photos: 1_129207899_220df2876123d3542f, 6492_135055734_e0a9bcc31144f67fbd
            
            Поле access_key будет возвращено вместе с остальными данными фотографии в методах, которые возвращают фотографии, закрытые приватностью но доступные в данном контексте. Например данное поле имеют фотографии, возвращаемые методом newsfeed.get. список строк, разделенных через запятую, обязательный параметр
            </remarks>
            </param>
            <param name="extended">True — будут возвращены дополнительные поля likes, comments, tags, can_comment, can_repost. Поля comments и tags содержат только количество объектов. По умолчанию данные поля не возвращается</param>
            <param name="photoSizes">Возвращать ли доступные размеры фотографии в специальном формате</param>
            <returns>После успешного выполнения возвращает список объектов photo</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUploadServer(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографий. 
            </summary>
            <param name="albumId">Идентификатор альбома</param>
            <param name="groupId">Идентификатор сообщества, которому принадлежит альбом (если необходимо загрузить фотографию в альбом сообщества)</param>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.UploadServerInfo"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetProfileUploadServer">
            <summary>
            Возвращает адрес сервера для загрузки фотографии на страницу пользователя. 
            </summary>
            <returns>После успешного выполнения возвращает объект с единственным полем upload_url. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getProfileUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetChatUploadServer(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Позволяет получить адрес для загрузки фотографий мультидиалогов. 
            </summary>
            <param name="chatId">Идентификатор беседы, для которой нужно загрузить фотографию</param>
            <param name="cropX">Положительное число</param>
            <param name="cropY">Положительное число</param>
            <param name="cropWidth">Ширина фотографии после обрезки в px, минимальное значение 200</param>
            <returns>После успешного выполнения возвращает объект с единственным полем upload_url. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getChatUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveProfilePhoto(System.String,System.String,System.String)">
            <summary>
            Сохраняет фотографию пользователя после успешной загрузки. 
            </summary>
            <param name="server">Параметр, возвращаемый в результате загрузки фотографии на сервер.</param>
            <param name="hash">Параметр, возвращаемый в результате загрузки фотографии на сервер.</param>
            <param name="photo">Параметр, возвращаемый в результате загрузки фотографии на сервер.</param>
            <returns>После успешного выполнения возвращает объект, содержащий поля photo_hash и photo_src (при работе через VK.api метод вернёт поля photo_src, photo_src_big, photo_src_small). Параметр photo_hash необходим для подтверждения пользователем изменения его фотографии через вызов метода saveProfilePhoto Javascript API. Поле photo_src содержит путь к загруженной фотографии. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.saveProfilePhoto"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveWallPhoto(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом <see cref="M:VkNet.Categories.PhotoCategory.GetWallUploadServer(System.Nullable{System.Int64})"/>. 
            </summary>
            <param name="userId">Идентификатор пользователя, на стену которого нужно сохранить фотографию</param>
            <param name="groupId">Идентификатор сообщества, на стену которого нужно сохранить фотографию</param>
            <param name="photo">параметр, возвращаемый в результате загрузки фотографии на сервер</param>
            <param name="server">Параметр, возвращаемый в результате загрузки фотографии на сервер. целое число</param>
            <param name="hash">Параметр, возвращаемый в результате загрузки фотографии на сервер</param>
            <returns>После успешного выполнения возвращает массив с загруженной фотографией, возвращённый объект имеет поля id, pid, aid, owner_id, src, src_big, src_small, created. В случае наличия фотографий в высоком разрешении также будут возвращены адреса с названиями src_xbig и src_xxbig. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.saveWallPhoto"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии на стену пользователя или сообщества. 
            </summary>
            <param name="groupId">Идентификатор сообщества, на стену которого нужно загрузить фото (без знака «минус»)</param>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.UploadServerInfo"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getWallUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMessagesUploadServer">
            <summary>
            Возвращает адрес сервера для загрузки фотографии в личное сообщение пользователю. 
            </summary>
            <returns>После успешного выполнения возвращает объект <see cref="T:VkNet.Model.UploadServerInfo"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getMessagesUploadServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMessagesPhoto(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом <see cref="M:VkNet.Categories.PhotoCategory.GetMessagesUploadServer"/>. 
            </summary>
            <param name="photo">параметр, возвращаемый в результате загрузки фотографии на сервер</param>
            <returns>После успешного выполнения возвращает массив с загруженной фотографией, возвращённый объект имеет поля id, pid, aid, owner_id, src, src_big, src_small, created. В случае наличия фотографий в высоком разрешении также будут возвращены адреса с названиями src_xbig и src_xxbig. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.saveMessagesPhoto"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Report(System.Int64,System.Int64,VkNet.Enums.VideoReportType)">
            <summary>
            Позволяет пожаловаться на фотографию.
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="reason">Тип жалобы</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.report"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.VideoReportType)">
            <summary>
            Позволяет пожаловаться на комментарий к фотографии. 
            </summary>
            <param name="ownerId">Идентификатор владельца фотографии к которой оставлен комментарий</param>
            <param name="commentId">Идентификатор комментария</param>
            <param name="reason">Тип жалобы</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.reportComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Search(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Осуществляет поиск изображений по местоположению или описанию. 
            </summary>
            <param name="query">Строка поискового запроса</param>
            <param name="lat">Географическая широта отметки, заданная в градусах (от -90 до 90)</param>
            <param name="longitude">Географическая долгота отметки, заданная в градусах (от -180 до 180)</param>
            <param name="startTime">Время в формате unixtime, не раньше которого должны были быть загружены найденные фотографии. положительное число</param>
            <param name="endTime">Время в формате unixtime, не позже которого должны были быть загружены найденные фотографии. положительное число</param>
            <param name="sort">True – сортировать по количеству отметок «Мне нравится», false – сортировать по дате добавления фотографии. положительное число</param>
            <param name="offset">смещение относительно первой найденной фотографии для выборки определенного подмножества. положительное число</param>
            <param name="count">количество возвращаемых фотографий. положительное число, по умолчанию 100, максимальное значение 1000</param>
            <param name="radius">радиус поиска в метрах. (работает очень приближенно, поэтому реальное расстояние до цели может отличаться от заданного). Может принимать значения: 10, 100, 800, 6000, 50000 положительное число, по умолчанию 5000</param>
            <returns>После успешного выполнения возвращает список объектов фотографий.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Save(System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки. 
            </summary>
            <param name="albumId">Идентификатор альбома, в который необходимо сохранить фотографии</param>
            <param name="groupId">Идентификатор сообщества, в которое необходимо сохранить фотографии</param>
            <param name="server">параметр, возвращаемый в результате загрузки фотографий на сервер</param>
            <param name="photosList">Параметр, возвращаемый в результате загрузки фотографий на сервер</param>
            <param name="hash">Параметр, возвращаемый в результате загрузки фотографий на сервер</param>
            <param name="latitude">Географическая широта, заданная в градусах (от -90 до 90)</param>
            <param name="longitude">Географическая долгота, заданная в градусах (от -180 до 180)</param>
            <param name="caption">Текст описания фотографии</param>
            <param name="description">Текст описания альбома</param>
            <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Photo"/>. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.save"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Copy(System.Int64,System.Int64,System.String)">
            <summary>
            Позволяет скопировать фотографию в альбом &quot;Сохраненные фотографии&quot; 
            </summary>
            <param name="ownerId">Идентификатор владельца фотографии</param>
            <param name="photoId">Индентификатор фотографии</param>
            <param name="accessKey">Специальный код доступа для приватных фотографий</param>
            <returns>Возвращает идентификатор созданной фотографии.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.copy"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Edit(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Изменяет описание у выбранной фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="caption">Новый текст описания к фотографии. Если параметр не задан, то считается, что он равен пустой строке.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.edit"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Move(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Переносит фотографию из одного альбома в другой. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="targetAlbumId">Идентификатор альбома, в который нужно переместить фотографию</param>
            <param name="photoId">Идентификатор фотографии, которую нужно перенести</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.move"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VkNet.Categories.PhotoCategory.MakeCover(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})" -->
        <member name="M:VkNet.Categories.PhotoCategory.ReorderAlbums(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок альбома в списке альбомов пользователя. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит альбом. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="albumId">Идентификатор альбома</param>
            <param name="before">Идентификатор альбома, перед которым следует поместить альбом</param>
            <param name="after">Идентификатор альбома, после которого следует поместить альбом</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.reorderAlbums"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReorderPhotos(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок фотографии в списке фотографий альбома пользователя. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="before">Идентификатор фотографии, перед которой следует поместить фотографию</param>
            <param name="after">Идентификатор фотографии, после которой следует поместить фотографию</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.reorderPhotos"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAll(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
             <summary>
             Возвращает все фотографии пользователя или сообщества в антихронологическом порядке. 
             </summary>
             <param name="ownerId">Идентификатор пользователя или сообщества, фотографии которого нужно получить. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
             <param name="extended">True — возвращать расширенную информацию о фотографиях</param>
             <param name="offset">Смещение, необходимое для выборки определенного подмножества фотографий. По умолчанию — 0. положительное число</param>
             <param name="count">Число фотографий, информацию о которых необходимо получить. положительное число, по умолчанию 20, максимальное значение 200</param>
             <param name="photoSizes">True — будут возвращены размеры фотографий в специальном формате</param>
             <param name="noServiceAlbums">false — вернуть все фотографии, включая находящиеся в сервисных альбомах, таких как "Фотографии на моей стене" (по умолчанию);  true — вернуть фотографии только из стандартных альбомов пользователя или сообщества</param>
             <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Photo"/>.
             <remarks>
             Если был задан параметр extended — будет возвращено поле likes: 
             user_likes: 1 — текущему пользователю нравится данная фотография, 0 - не указано.
             count — количество пользователей, которым нравится текущая фотография.
             
             Если был задан параметр photo_sizes=1, вместо полей width и height возвращаются размеры копий фотографии в специальном формате.
             </remarks>
            </returns>
             <remarks>
             Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getAll"/>.
             </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUserPhotos(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список фотографий, на которых отмечен пользователь 
            </summary>
            <param name="userId">Идентификатор пользователя, список фотографий для которого нужно получить. положительное число, по умолчанию идентификатор текущего пользователя</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества фотографий. По умолчанию — 0. положительное число</param>
            <param name="count">Количество фотографий, которое необходимо получить. положительное число, по умолчанию 20, максимальное значение 1000</param>
            <param name="extended">True — будут возвращены дополнительные поля likes, comments, tags, can_comment. Поля comments и tags содержат только количество объектов. По умолчанию данные поля не возвращается</param>
            <param name="sort">Сортировка результатов (false — по дате добавления отметки в порядке убывания, true — по дате добавления отметки в порядке возрастания)</param>
            <returns>После успешного выполнения возвращает список объектов photo. </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getUserPhotos"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет указанный альбом для фотографий у текущего пользователя 
            </summary>
            <param name="albumId">Идентификатор альбома</param>
            <param name="groupId">Идентификатор сообщества, в котором размещен альбом.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.deleteAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Delete(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаление фотографии на сайте. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ConfirmTag(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Подтверждает отметку на фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="tagId">Идентификатор отметки на фотографии</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.confirmTag"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetComments(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.SafetyEnums.CommentsSort,System.String)">
            <summary>
            Возвращает список комментариев к фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="needLikes">True — будет возвращено дополнительное поле likes. По умолчанию поле likes не возвращается</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества комментариев</param>
            <param name="count">Количество комментариев, которое необходимо получить.</param>
            <param name="sort">Порядок сортировки комментариев (asc — от старых к новым, desc - от новых к старым)</param>
            <param name="accessKey">строка</param>
            <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Comment"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getComments"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAllComments(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает отсортированный в антихронологическом порядке список всех комментариев к конкретному альбому или ко всем альбомам пользователя. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежат фотографии. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="albumId">Идентификатор альбома. Если параметр не задан, то считается, что необходимо получить комментарии ко всем альбомам пользователя или сообщества</param>
            <param name="needLikes">True — будет возвращено дополнительное поле likes. По умолчанию поле likes не возвращается</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества комментариево</param>
            <param name="count">Количество комментариев, которое необходимо получить. Если параметр не задан, то считается что он равен 20. Максимальное значение параметра 100. положительное число</param>
            <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Comment"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getAllComments"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateComment(System.Int64,System.Nullable{System.Int64},System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
             <summary>
             Создает новый комментарий к фотографии. 
             </summary>
             <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
             <param name="photoId">Идентификатор фотографии</param>
             <param name="message">Текст комментария (является обязательным, если не задан параметр attachments)</param>
             <param name="attachments">Список объектов, приложенных к комментарию и разделённых символом &quot;,&quot;. Поле attachments представляется в формате: 
             &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt; 
             &lt;type&gt; — тип медиа-вложения: 
             photo — фотография 
             video — видеозапись 
             audio — аудиозапись 
             doc — документ 
             &lt;owner_id&gt; — идентификатор владельца медиа-вложения  
             &lt;media_id&gt; — идентификатор медиа-вложения. 
             <example>
             Например: 
             photo100172_166443618,photo66748_265827614
             </example>
            Параметр является обязательным, если не задан параметр message. список строк, разделенных через запятую</param>
             <param name="fromGroup">Данный параметр учитывается, если oid &lt; 0 (комментарий к фотографии группы). 1 — комментарий будет опубликован от имени группы, 0 — комментарий будет опубликован от имени пользователя (по умолчанию)</param>
             <param name="replyToComment"></param>
             <param name="accessKey">строка</param>
             <returns>После успешного выполнения возвращает идентификатор созданного комментария.</returns>
             <remarks>
             Страница документации ВКонтакте <see href="http://vk.com/dev/photos.createComment"/>.
             </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteComment(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="commentId">Идентификатор комментария</param>
            <returns>После успешного выполнения возвращает true (false, если комментарий не найден). 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.deleteComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="commentId">Идентификатор удаленного комментария</param>
            <returns>После успешного выполнения возвращает true (false, если комментарий с таким идентификатором не является удаленным).</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.restoreComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Изменяет текст комментария к фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="commentId">Идентификатор комментария</param>
            <param name="message">Новый текст комментария (является обязательным, если не задан параметр attachments)</param>
            <param name="attachments">Новый список объектов, приложенных к комментарию и разделённых символом &quot;,&quot;. Поле attachments представляется в формате: &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt; &lt;type&gt; — тип медиа-вложения: 
            photo — фотография 
            video — видеозапись 
            audio — аудиозапись 
            doc — документ 
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения 
            &lt;media_id&gt; — идентификатор медиа-вложения.
            <example>
            Например:
            photo100172_166443618,photo66748_265827614
            </example>
            Параметр является обязательным, если не задан параметр message. список строк, разделенных через запятую</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.editComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetTags(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Возвращает список отметок на фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="accessKey">строковой ключ доступа, который може быть получен при получении объекта фотографии</param>
            <returns>После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.Tag"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getTags"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.PutTag(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Добавляет отметку на фотографию. 
            </summary>
            <param name="ownerId">Идентификатор пользователя, которому принадлежит фотография</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="userId">Идентификатор пользователя</param>
            <param name="x">Координата верхнего левого угла области с отметкой в % от ширины фотографии</param>
            <param name="y">Координата верхнего левого угла области с отметкой в % от высоты фотографии</param>
            <param name="x2">Координата правого нижнего угла области с отметкой в % от ширины фотографии</param>
            <param name="y2">Координата правого нижнего угла области с отметкой в % от высоты фотографии</param>
            <returns>После успешного выполнения возвращает идентификатор созданной отметки.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.putTag"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RemoveTag(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет отметку с фотографии. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком &quot;-&quot; — например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)</param>
            <param name="photoId">Идентификатор фотографии</param>
            <param name="tagId">Идентификатор отметки</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.removeTag"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetNewTags(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список фотографий, на которых есть непросмотренные отметки. 
            </summary>
            <param name="offset">Смещение, необходимое для получения определённого подмножества фотографий</param>
            <param name="count">Количество фотографий, которые необходимо вернуть. положительное число, максимальное значение 100, по умолчанию 20</param>
            <returns>После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Photo"/>.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/photos.getNewTags"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Enums.CommentPrivacy">
            <summary>
            Уровень доступа к комментированию альбома
            </summary>
        </member>
        <member name="F:VkNet.Enums.CommentPrivacy.AllUsers">
            <summary>
            Все пользователи
            </summary>
        </member>
        <member name="F:VkNet.Enums.CommentPrivacy.OnlyFriends">
            <summary>
            Только друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.CommentPrivacy.FriendsAndTheirFriends">
            <summary>
            Друзья и друзья друзей
            </summary>
        </member>
        <member name="F:VkNet.Enums.CommentPrivacy.OnlyMe">
            <summary>
            Только я
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.CountersFilter">
            <summary>
            Фильтры счетчиков
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.MultivaluedFilter`1">
            <summary>
            Фильтр, хранящий несколько значений и представляющий их в виде набора строковых представлений каждого возможного значения фильтра.
            Аналог enum с атрибутом [Flags].
            </summary>
            <typeparam name="TFilter">Непосредственно наследник</typeparam>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.SafetyEnum`1">
            <summary>
            Аналог enum, типобезопасен.
            </summary>
            <typeparam name="TFilter">Непосредственно наследник</typeparam>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.op_BitwiseOr(VkNet.Enums.Filters.MultivaluedFilter{`0},VkNet.Enums.Filters.MultivaluedFilter{`0})">
            <summary>
            Объединяет наборы фильтров
            </summary>
            <param name="left">Первый набор фильтров</param>
            <param name="right">Второй набор фильтров</param>
            <returns>Объединенный набор фильтров</returns>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Friends">
            <summary>
            Количество заявок в друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Messages">
            <summary>
            Количество непрочитанных сообщений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Photos">
            <summary>
            Количество фото
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Videos">
            <summary>
            Количество видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Notes">
            <summary>
            Количество заметок
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Gifts">
            <summary>
            Количество подарков
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Events">
            <summary>
            Количество событий
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Groups">
            <summary>
            Количество групп
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Notifications">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.All">
            <summary>
            Все фильтры
            </summary>
        </member>
        <member name="T:VkNet.Categories.DatabaseCategory">
            <summary>
            Методы для получения справочной информации (страны, города, школы, учебные заведения и т.п.).
            </summary>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountries(System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список стран.
            </summary>
            <param name="needAll">Флаг - вернуть список всех стран.</param>
            <param name="codes">Перечисленные через запятую двухбуквенные коды стран в стандарте ISO 3166-1 alpha-2 
            <see href="http://vk.com/dev/country_codes"/>.</param>
            <param name="offset">Отступ, необходимый для выбора определенного подмножества стран.</param>
            <param name="count">Количество стран, которое необходимо вернуть (по умолчанию 100, максимальное значение 1000).</param>
            <remarks>
            Если не заданы параметры needAll и code, то возвращается краткий список стран, расположенных наиболее близко к стране 
            текущего пользователя. Если задан параметр needAll, то будет возвращен список всех стран. Если задан параметр code, 
            то будут возвращены только страны с перечисленными ISO 3166-1 alpha-2 кодами.
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getCountries"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetRegions(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список регионов.
            </summary>
            <param name="countryId">Идентификатор страны.</param>
            <param name="query">Строка поискового запроса.</param>
            <param name="count">Количество регионов, которое необходимо вернуть.</param>
            <param name="offset">Отступ, необходимый для выбора определенного подмножества регионов.</param>
            <returns>Список регионов.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getRegions"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetStreetsById(System.Int32[])">
            <summary>
            Возвращает информацию об улицах по их идентификаторам.
            </summary>
            <param name="streetIds">Идентификаторы улиц.</param>
            <returns>Информация об улицах.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getStreetsById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountriesById(System.Int32[])">
            <summary>
            Возвращает информацию о странах по их идентификаторам.
            </summary>
            <param name="countryIds">Идентификаторы стран.</param>
            <returns>Информация о странах.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getCountriesById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCities(System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список городов.
            </summary>
            <param name="countryId">Идентификатор страны.</param>
            <param name="regionId">Идентификатор региона.</param>
            <param name="query">Строка поискового запроса. Например, Санкт.</param>
            <param name="needAll">true – возвращать все города. false – возвращать только основные города.</param>
            <param name="count">Количество городов, которые необходимо вернуть.</param>
            <param name="offset">Отступ, необходимый для получения определенного подмножества городов.</param>
            <returns>Cписок городов</returns>
            <remarks>
            Возвращает коллекцию городов, каждый из которых содержит поля <see cref="P:VkNet.Model.City.Id"/> и <see cref="P:VkNet.Model.City.Title"/>. 
            При наличии информации о регионе и/или области, в которых находится данный город, в объекте могут дополнительно 
            включаться поля <see cref="P:VkNet.Model.City.Area"/> и <see cref="P:VkNet.Model.City.Region"/>. 
            Если не задан параметр <paramref name="query"/>, то будет возвращен список самых крупных городов в заданной стране. 
            Если задан параметр <paramref name="query"/>, то будет возвращен список городов, которые релевантны поисковому запросу.
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getCities"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCitiesById(System.Int32[])">
            <summary>
            Возвращает информацию о городах по их идентификаторам.
            </summary>
            <param name="cityIds">Идентификаторы городов.</param>
            <returns>Информация о городах.</returns>
            <remarks>
            Идентификаторы городов могут быть получены с помощью методов <see cref="M:VkNet.Categories.UsersCategory.Get(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)"/>"/&gt;, 
            places.getById, places.search, places.getCheckins.
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getCitiesById"/>. 
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetUniversities(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список высших учебных заведений.
            </summary>
            <param name="countryId">Идентификатор страны, учебные заведения которой необходимо вернуть.</param>
            <param name="cityId">Идентификатор города, учебные заведения которого необходимо вернуть.</param>
            <param name="query">Строка поискового запроса. Например, СПБ.</param>
            <param name="offset">Отступ, необходимый для получения определенного подмножества учебных заведений.</param>
            <param name="count">Количество учебных заведений, которое необходимо вернуть.</param>
            <returns>Список высших учебных заведений, удовлетворяющих заданным условиям.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getUniversities"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetSchools(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список школ.
            </summary>
            <param name="countryId">Идентификатор страны, школы которой необходимо вернуть.</param>
            <param name="cityId">Идентификатор города, школы которого необходимо вернуть.</param>
            <param name="query">Строка поискового запроса. Например, гимназия.</param>
            <param name="offset">Отступ, необходимый для получения определенного подмножества школ.</param>
            <param name="count">Количество школ, которое необходимо вернуть.</param>
            <returns>Cписок школ.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getSchools"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetFaculties(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список факультетов.
            </summary>
            <param name="universityId">Идентификатор университета, факультеты которого необходимо получить.</param>
            <param name="count">Отступ, необходимый для получения определенного подмножества факультетов.</param>
            <param name="offset">Количество факультетов которое необходимо получить.</param>
            <returns>Cписок факультетов.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getFaculties"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.FaveCategory">
            <summary>
            Категория работы с закладками.
            </summary>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetUsers(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, добавленных текущим пользователем в закладки.
            </summary>
            <param name="count">Количество пользователей, информацию о которых необходимо вернуть</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества пользователей</param>
            <returns>После успешного выполнения возвращает список объектов пользователей.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/fave.getUsers"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPhotos(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает фотографии, на которых текущий пользователь поставил отметку "Мне нравится".
            </summary>
            <param name="count">Количество пользователей, информацию о которых необходимо вернуть</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества пользователей</param>
            <returns>После успешного выполнения возвращает список объектов фотографий.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/fave.getPhotos"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPosts(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает записи, на которых текущий пользователь поставил отметку «Мне нравится».
            </summary>
            <param name="count">Количество пользователей, информацию о которых необходимо вернуть</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества пользователей</param>
            <returns>После успешного выполнения возвращает список объектов записей на стене.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/fave.getPosts"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetVideos(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список видеозаписей, на которых текущий пользователь поставил отметку «Мне нравится».
            </summary>
            <param name="count">Количество пользователей, информацию о которых необходимо вернуть</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества пользователей</param>
            <returns>После успешного выполнения возвращает список объектов записей на стене.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/fave.getVideos"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetLinks(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает ссылки, добавленные в закладки текущим пользователем.
            </summary>
            <param name="count">Количество пользователей, информацию о которых необходимо вернуть</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества пользователей</param>
            <returns>После успешного выполнения возвращает общее количество ссылок и массив объектов Link.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/fave.getLinks"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.GroupsCategory">
            <summary>
            Методы для работы с сообществами (группами).
            </summary>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Join(System.Int64,System.Boolean)">
            <summary>
            Данный метод позволяет вступить в группу, публичную страницу, а также подтверждать об участии во встрече.
            </summary>
            <param name="gid">Id группы</param>
            <param name="notSure">True - Возможно пойду. False - Точно пойду. По умолчанию false.</param>
            <returns>В случае успешного вступления в группу метод вернёт true, иначе false.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Groups"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.join"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Leave(System.Int64)">
            <summary>
            Данный метод позволяет выходить из группы, публичной страницы, или встречи.
            </summary>
            <param name="gid">Id группы</param>
            <returns>В случае успешного выхода из группы метод вернёт true, иначе false.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Groups"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.leave"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Get(System.Int64,System.Boolean,VkNet.Enums.Filters.GroupsFilters,VkNet.Enums.Filters.GroupsFields,System.Int32,System.Int32)">
            <summary>
            Возвращает список групп указанного пользователя.
            </summary>
            <param name="uid">Id пользователя</param>
            <param name="extended">Возвращать полную информацию?</param>
            <param name="filters">Список фильтров сообществ</param>
            <param name="fields">Список полей информации о группах</param>
            <param name="offset">Смещение, необходимое для выборки определённого подмножества сообществ.</param>
            <param name="count">Количество сообществ, информацию о которых нужно вернуть (Максимальное значение 1000)</param>
            <returns>Список групп</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetById(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.GroupsFields)">
            <summary>
            Возвращает информацию о нескольких группах.
            </summary>
            <param name="gids">Список групп</param>
            <param name="fields">Список полей информации о группах</param>
            <returns>Список групп</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetById(System.Int64,VkNet.Enums.Filters.GroupsFields)">
            <summary>
            Возвращает информацию о заданной группе.
            </summary>
            <param name="gid">Id группы</param>
            <param name="fields">Список полей информации о группах</param>
            <returns>Список групп</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetMembers(System.Int64,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.SafetyEnums.GroupsSort)">
            <summary>
            Возвращает список участников группы.
            </summary>
            <param name="gid">Id группы</param>
            <param name="totalCount">Общее количество участников</param>
            <param name="count">Количество участников которое необходимо получить</param>
            <param name="offset">Смещение</param>
            <param name="sort">Сортировка Id пользователей</param>
            <returns>Id пользователей состоящих в группе</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getMembers"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.IsMember(System.Int64,System.Int64)">
            <summary>
            Возвращает информацию о том является ли пользователь участником заданной группы.
            </summary>
            <param name="gid">Id группы</param>
            <param name="uid">Id пользователя</param>
            <returns>True если пользователь состоит в группе, иначе False</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.isMember"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Search(System.String,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.GroupsFields,System.Int32)">
            <summary>
            Осуществляет поиск групп по заданной подстроке.
            </summary>
            <param name="query">Поисковый запрос</param>
            <param name="totalCount">Общее количество групп удовлетворяющих запросу</param>
            <param name="offset">Смещение</param>
            <param name="count">Количество в выбоке</param>
            <returns>Список объектов групп</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetInvites(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Данный метод возвращает список приглашений в сообщества и встречи.
            </summary>
            <param name="count">количество приглашений, которое необходимо вернуть</param>
            <param name="offset">смещение, необходимое для выборки определённого подмножества приглашений</param>
            <returns>После успешного выполнения возвращает список объектов сообществ с дополнительным полем InvitedBy, содержащим идентификатор пользователя, который отправил приглашение.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getInvites"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.BanUser(System.Int64,System.Int64,System.Nullable{System.DateTime},System.Nullable{VkNet.Enums.BanReason},System.String,System.Boolean)">
            <summary>
            Добавляет пользователя в черный список группы.
            </summary>
            <param name="groupId">Идентификатор группы.</param>
            <param name="userId">Идентификатор пользователя, которого нужно добавить в черный список.</param>
            <param name="endDate">Дата завершения срока действия бана. Если параметр не указан пользователь будет заблокирован навсегда.</param>
            <param name="reason">Причина бана <see cref="T:VkNet.Enums.BanReason"/>.</param>
            <param name="comment">Текст комментария к бану.</param>
            <param name="commentVisible">true – текст комментария будет отображаться пользователю. false – текст комментария не доступен 
            пользователю (по умолчанию).</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.banUser"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetBanned(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список забаненных пользователей в сообществе
            </summary>
            <param name="groupId">идентификатор сообщества</param>
            <param name="count">количество записей, которое необходимо вернуть</param>
            <param name="offset">смещение, необходимое для выборки определенного подмножества черного списка</param>
            <returns>После успешного выполнения возвращает список объектов пользователей с дополнительным полем <see cref="T:VkNet.Model.BanInfo"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getBanned"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.UnbanUser(System.Int64,System.Int64)">
            <summary>
            Убирает пользователя из черного списка сообщества.
            </summary>
            <param name="groupId">идентификатор сообщества</param>
            <param name="userId">идентификатор пользователя, которого нужно убрать из черного списка</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.unbanUser"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditManager(System.Int64,System.Int64,System.Nullable{VkNet.Enums.AdminLevel},System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Позволяет назначить/разжаловать руководителя в сообществе или изменить уровень его полномочий.
            </summary>
            <param name="groupId">Идентификатор сообщества (указывается без знака «минус»)</param>
            <param name="userId">Идентификатор пользователя, чьи полномочия в сообществе нужно изменить</param>
            <param name="role">Уровень полномочий. Если параметр не задан, с пользователя user_id снимаются полномочия руководителя</param>
            <param name="isContact">Отображать ли пользователя в блоке контактов сообщества</param>
            <param name="contactPosition">Должность пользователя, отображаемая в блоке контактов</param>
            <param name="contactPhone">Телефон пользователя, отображаемый в блоке контактов</param>
            <param name="contactEmail">Email пользователя, отображаемый в блоке контактов</param>
            <returns>В случае успешного выполнения возвращает true</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.editManager"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditManager(System.Int64,System.Int64,System.Nullable{VkNet.Enums.AdminLevel})">
            <summary>
            Позволяет назначить/разжаловать руководителя в сообществе или изменить уровень его полномочий.
            </summary>
            <param name="groupId">Идентификатор сообщества (указывается без знака «минус»)</param>
            <param name="userId">Идентификатор пользователя, чьи полномочия в сообществе нужно изменить</param>
            <param name="role">Уровень полномочий. Если параметр не задан, с пользователя user_id снимаются полномочия руководителя</param>
            <returns>В случае успешного выполнения возвращает true</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.editManager"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.MessagesCategory">
            <summary>
            Методы для работы с сообщениями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Get(VkNet.Enums.MessageType,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{VkNet.Enums.MessagesFilter},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Возвращает список входящих либо исходящих личных сообщений текущего пользователя. 
            </summary>
            <param name="type">Тип сообщений которые необходимо получить.
            Необходимо передать <see cref="F:VkNet.Enums.MessageType.Received"/> для полученных сообщений и <see cref="F:VkNet.Enums.MessageType.Sended"/>
            для отправленных пользователем сообщений.
            </param>
            <param name="totalCount">Общее количество сообщений, удовлетворяющих условиям фильтрации.</param>
            <param name="count">Количество сообщений, которое необходимо получить (по умолчанию 20, но не более 200).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества сообщений.</param>
            <param name="timeOffset">Максимальное время, прошедшее с момента отправки сообщения до текущего момента в секундах. 0, если Вы хотите получить сообщения любой давности.</param>
            <param name="filter">Фильтр возвращаемых сообщений.</param>
            <param name="previewLength">Количество символов, по которому нужно обрезать сообщение. 
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются). 
            Обратите внимание что сообщения обрезаются по словам.</param>
            <param name="lastMessageId">Идентификатор сообщения, полученного перед тем, которое нужно вернуть последним (при условии, что после него было получено не более count сообщений, иначе необходимо использовать с параметром offset).</param>
            <returns>Список сообщений, удовлетворяющий условиям фильтрации.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetHistory(System.Int64,System.Boolean,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64})">
            <summary>
            Возвращает историю сообщений текущего пользователя с указанным пользователя или групповой беседы. 
            </summary>
            <param name="id">
            Если параметр <paramref name="isChat"/> равен false, то задает идентификатор пользователя, историю переписки 
            с которым необходимо вернуть.
            Если параметр <paramref name="isChat"/> равен true, то задает идентификатор беседы, историю переписки в которой 
            необходимо вернуть.
            </param>
            <param name="isChat">Признак нужно ли вернуть историю сообщений для беседы (true) или для указанного пользователя.</param>
            <param name="totalCount">Общее количество сообщений в истории.</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества сообщений.</param>
            <param name="count">Количество сообщений, которое необходимо получить (но не более 200).</param>
            <param name="inReverse">
            Если данный параметр равен true, то сообщения возвращаются в хронологическом порядке. 
            Если данный параметр равен false (по умолчанию), сообщения возвращаются в обратном хронологическом порядке. 
            </param>
            <param name="startMessageId">Идентификатор сообщения, начиная с которго необходимо получить последующие сообщения.</param>
            <returns>
            Запрошенные сообщения.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getHistory"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetById(System.Collections.Generic.IEnumerable{System.Int64},System.Int32@,System.Nullable{System.Int32})">
            <summary>
            Возвращает сообщения по их идентификаторам.
            </summary>
            <param name="messageIds">Идентификаторы сообщений, которые необходимо вернуть (не более 100).</param>
            <param name="totalCount">Общее количество сообщений.</param>
            <param name="previewLength">Количество символов, по которому нужно обрезать сообщение. 
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются).</param>
            <returns>Запрошенные сообщения.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetById(System.Int64,System.Nullable{System.Int32})">
            <summary>
            Ворзвращает указанное сообщение по его идентификатору.
            </summary>
            <param name="messageId">Идентификатор запрошенного сообщения.</param>
            <param name="previewLength">Количество символов, по которому нужно обрезать сообщение. 
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются).</param>
            <returns>Запрошенное сообщение, null если сообщение с заданным идентификатором не найдено.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetDialogs(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Возвращает список диалогов текущего пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя, последнее сообщение в переписке с которым необходимо вернуть.</param>
            <param name="totalCount">Общее количество диалогов с учетом фильтра. Если получены только диалоги, в которых есть непрочитанные сообщения, то вернет то же что и unreadCount</param>
            <param name="unreadCount">Количество диалогов с непрочитанными сообщениями</param>
            <param name="unread">Значение true означает, что нужно вернуть только диалоги в которых есть непрочитанные входящие сообщения. По умолчанию false.</param>
            <param name="chatId">Идентификатор беседы, последнее сообщение в которой необходимо вернуть.</param>
            <param name="count">Количество диалогов, которое необходимо получить (но не более 200).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества диалогов.</param>
            <param name="previewLength">Количество символов, по которому нужно обрезать сообщение. 
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются).</param>
            <returns>Список диалогов текущего пользователя.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getDialogs"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchDialogs(System.String,VkNet.Enums.Filters.ProfileFields)">
            <summary>
            Возвращает список найденных диалогов текущего пользователя по введенной строке поиска. 
            </summary>
            <param name="query">Подстрока, по которой будет производиться поиск.</param>
            <param name="fields">Поля профилей собеседников, которые необходимо вернуть.</param>
            <returns>
            В результате выполнения данного метода будет возвращён массив объектов профилей, бесед и email.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.searchDialogs"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Search(System.String,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список найденных личных сообщений текущего пользователя по введенной строке поиска. 
            </summary>
            <param name="query">Подстрока, по которой будет производиться поиск.</param>
            <param name="totalCount">Общее количество найденных сообщений.</param>
            <param name="count">Количество сообщений, которое необходимо получить (но не более 100).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества сообщений из списка найденных.</param>
            <returns>Список личных сообщений пользователя, удовлетворяющих условиям запроса.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Send(System.Int64,System.Boolean,System.String,System.String,VkNet.Model.Attachments.Attachment,System.Collections.Generic.IEnumerable{System.Int64},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Посылает личное сообщение.
            </summary>
            <param name="id">
            Если параметр <paramref name="isChat"/> равен false, то задает идентификатор пользователя, которому необходимо послать сообщение.
            Если параметр <paramref name="isChat"/> равен true, то задает идентификатор беседы, к которой будет относиться сообщение.
            </param>
            <param name="isChat">Признак посылается ли сообщение в беседу (true) или указанному пользователю (false).</param>
            <param name="message">Текст личного cообщения (является обязательным, если не задан параметр <paramref name="attachment"/>).</param>
            <param name="title">Заголовок сообщения.</param>
            <param name="attachment">Медиа-приложение к личному сообщению.</param>
            <param name="forwardMessagedIds">Идентификаторы пересылаемых сообщений. Перечисленные сообщения отправителя будут отображаться 
            в теле письма у получателя.</param>
            <param name="fromChat">Задайте false для обычного сообщения и true для сообщения из часта.</param>
            <param name="latitude">Широта при добавлении местоположения.</param>
            <param name="longitude">Долгота при добавлении местоположения.</param>
            <param name="guid">Уникальный строковой идентификатор, предназначенный для предотвращения повторной отправки одинакового сообщения.</param>
            <param name="captchaSid">Id капчи (только если для вызова метода необходимо ввести капчу)</param>
            <param name="captchaKey">Текст капчи (только если для вызова метода необходимо ввести капчу)</param>
            <returns>Возвращается идентификатор отправленного сообщения.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.send"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteDialog(System.Int64,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Удаляет все личные сообщения в диалоге. 
            </summary>
            <param name="id">
            Если параметр <paramref name="isChat"/> равен false, то задает идентификатор пользователя, из диалога с которым необходимо удалить свои личные сообщения.
            Если параметр <paramref name="isChat"/> равен true, то задает идентификатор беседы, из которой необходимо удалить свои личные сообщения.
            </param>
            <param name="isChat">Признак удаляются ли сообщения из беседы (true) или из диалога с указанным пользователем (false).</param>
            <param name="offset">Смещение, начиная с которого нужно удалить переписку (по умолчанию удаляются все сообщения,
             начиная с первого).</param>
            <param name="limit">Как много сообщений нужно удалить. Обратите внимание что на метод наложено ограничение, за один вызов 
            нельзя удалить больше 10000 сообщений, поэтому если сообщений в переписке больше - метод нужно вызывать несколько раз.</param>
            <returns>Признак удалось ли удалить сообщения.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.deleteDialog"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Delete(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Удаляет сообщения пользователя.
            </summary>
            <param name="messageIds">
            Идентификаторы удаляемых сообщений.
            </param>
            <returns>
            Возвращает словарь (идентификатор сообщения -&gt; признак было ли удаление сообщения успешным).
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Delete(System.Int64)">
            <summary>
            Удаляет личное сообщение пользователя с заданным идентификатором.
            </summary>
            <param name="messageId">
            Идентификатор удаляемого сообщения.
            </param>
            <returns>
            Признак было ли удаление сообщения успешным.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Restore(System.Int64)">
            <summary>
            Восстанавливает удаленное сообщение.
            </summary>
            <param name="messageId">Идентификатор сообщения, которое нужно восстановить.</param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.restore"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsNew(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Помечает сообщения как непрочитанные. 
            </summary>
            <param name="messageIds">
            Идентификаторы сообщений, которые нужно пометить как непрочитанные. 
            </param>
            <returns>
            Возвращает true, если сообщения были успешно помечены как непрочитанные, false в противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.markAsNew"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsNew(System.Int64)">
            <summary>
            Помечает указанное сообщение как непрочитанное.
            </summary>
            <param name="messageId">
            Идентификатор сообщения, которое необходимо пометить как прочитанное.
            </param>
            <returns>
            Возвращает true, если сообщение были успешно помечено как непрочитанное, false в противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.markAsNew"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsRead(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Помечает сообщения как прочитанные. 
            </summary>
            <param name="messageIds">
            Идентификаторы сообщений, которые нужно пометить как прочитанные. 
            </param>
            <returns>
            Возвращает true, если сообщения были успешно помечены как прочитанные, false в противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.markAsRead"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsRead(System.Int64)">
            <summary>
            Помечает сообщение как прочитанное.
            </summary>
            <param name="messageId">
            Идентификатор сообщения, которое необходимо пометить как прочитанное.
            </param>
            <returns>
            Возвращает true, если сообщение были успешно помечено как прочитанное, false в противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.markAsRead"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SetActivity(System.Int64)">
            <summary>
            Изменяет статус набора текста пользователем в диалоге.
            </summary>
            <param name="userId">
            Идентификатор пользователя
            </param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае. 
            Текст «N набирает сообщение...» отображается в течение 10 секунд после вызова метода, либо до момента отправки сообщения. 
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.setActivity"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLastActivity(System.Int64)">
            <summary>
            Возвращает текущий статус и дату последней активности указанного пользователя. 
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о последней активности которого требуется получить. 
            </param>
            <returns>
            Возвращает объект, содержащий информацию об активности пользователя.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getLastActivity"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VkNet.Categories.MessagesCategory.GetChat(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)" -->
        <member name="M:VkNet.Categories.MessagesCategory.GetChat(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает информацию о беседах. 
            </summary>
            <param name="chatIds">Идентификаторы беседы.</param>
            <param name="fields">Список дополнительных полей профилей, которые необходимо вернуть.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя. </param>
            <returns>После успешного выполнения возварщает массив объектов, описывающих беседы (мультидиалог).</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getChat"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.CreateChat(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            Создаёт беседу с несколькими участниками. 
            </summary>
            <param name="userIds">Идентификаторы пользователей, которых нужно включить в беседу (мультидиалог).</param>
            <param name="title">Название беседы.</param>
            <returns>После успешного выполнения возвращает идентификатор созданной беседы.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.createChat"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.EditChat(System.Int64,System.String)">
            <summary>
            Изменяет название беседы.
            </summary>
            <param name="chatId">Идентификатор беседы.</param>
            <param name="title">Новое название для беседы.</param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае. 
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.editChat"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatUsers(System.Int64,VkNet.Enums.Filters.ProfileFields)">
            <summary>
            Позволяет получить список пользователей беседы по ее идентификатору. 
            </summary>
            <param name="chatId">Идентификатор беседы.</param>
            <param name="fields">Список дополнительных полей профилей, которые необходимо вернуть.</param>
            <returns>После успешного выполнения возвращает список идентификаторов участников беседы.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getChatUsers"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatUsers(System.Int64)">
            <summary>
            Позволяет получить список пользователей беседы по ее идентификатору. 
            </summary>
            <param name="chatId">Идентификатор беседы.</param>
            <returns>После успешного выполнения возвращает список идентификаторов участников беседы.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getChatUsers"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.AddChatUser(System.Int64,System.Int64)">
            <summary>
            Добавляет в беседу нового пользователя. 
            </summary>
            <param name="chatId">Идентификатор беседы.</param>
            <param name="userId">Идентификатор пользователя, которого необходимо включить в беседу.</param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае. 
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.addChatUser"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.RemoveChatUser(System.Int64,System.Int64)">
            <summary>
            Исключает из беседы пользователя, если текущий пользователь был создателем беседы либо пригласил исключаемого пользователя. 
            </summary>
            <param name="chatId">
            Идентификатор беседы.
            </param>
            <param name="userId">
            Идентификатор пользователя, которого необходимо исключить из беседы. 
            </param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае. 
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.removeChatUser"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollServer">
            <summary>
            Возвращает данные, необходимые для подключения к Long Poll серверу. 
            Long Poll подключение позволит Вам моментально узнавать о приходе новых сообщений и других событий. 
            </summary>
            <returns>
            Возвращает объект, с помощью которого можно подключиться к серверу быстрых сообщений для мгновенного 
            получения приходящих сообщений и других событий.  
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getLongPollServer"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollHistory">
            <summary>
            Возвращает обновления в личных сообщениях пользователя. 
            Для ускорения работы с личными сообщениями может быть полезно кешировать уже загруженные ранее сообщения на 
            мобильном устройстве / ПК пользователя, чтобы не получать их повторно при каждом обращении. 
            Этот метод помогает осуществить синхронизацию локальной копии списка сообщений с актуальной версией. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Messages"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/messages.getLongPollHistory"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.UtilsCategory">
            <summary>
            Служебные методы.
            </summary>
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.CheckLink(System.String)">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на сайте ВКонтакте.
            </summary>
            <param name="url">Внешняя ссылка, которую необходимо проверить.</param>
            <returns>Статус ссылки</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/utils.checkLink"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.ResolveScreenName(System.String)">
            <summary>
            Определяет тип объекта (пользователь, сообщество, приложение) и его идентификатор по короткому имени screenName.
            </summary>
            <param name="screenName">Короткое имя</param>
            <returns>Тип объекта</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/utils.resolveScreenName"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetServerTime">
            <summary>
            Возвращает текущее время на сервере ВКонтакте в unixtime.
            </summary>
            <returns>Время на сервере ВКонтакте в unixtime</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/utils.getServerTime"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.VideoCategory">
            <summary>
            Методы для работы с видеофайлами.
            </summary>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.VideoWidth,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает информацию о видеозаписях.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежат видеозаписи.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="albumId">Идентификатор альбома, видеозаписи из которого нужно вернуть.</param>
            <param name="width">Требуемая ширина изображений видеозаписей в пикселах.</param>
            <param name="count">Количество возвращаемых видеозаписей.</param>
            <param name="offset">Смещение относительно первой найденной видеозаписи для выборки определенного подмножества.</param>
            <param name="extended">Определяет, возвращать ли информацию о настройках приватности видео для текущего пользователя.</param>
            <returns>После успешного выполнения возвращает список объектов видеозаписей с дополнительным полем comments, содержащим число комментариев у 
            видеозаписи. Если был задан параметр <paramref name="extended"/>, то для каждой видеозаписи возвращаются дополнительные поля: 
            <see cref="P:VkNet.Model.Attachments.Video.CanComment"/>, <see cref="P:VkNet.Model.Attachments.Video.CanRepost"/>, <see cref="P:VkNet.Model.Attachments.Video.Likes"/></returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Edit(System.Int64,System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Редактирует данные видеозаписи на странице пользователя.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="name">Новое название для видеозаписи.</param>
            <param name="desc">Новое описание для видеозаписи.</param>
            <param name="privacyView">Настройки приватности для просмотра. 
            Могут принимать следующие значения: 
            <list type="number">
                <item>
                    Простые значения приватности:
                    <list type="bullet">
                        <item>0 – все пользователи</item>
                        <item>1 – только друзья</item>
                        <item>2 – друзья и друзья друзей</item>
                        <item>3 - только я</item>
                    </list>
                </item>
                <item>
                    Для того, чтобы разрешить доступ только определённым друзьям необходимо указать значение параметра в соответствующем формате: 
            users: friendId, friendId, ...
                </item>
                <item>
                    Для того, чтобы разрешить доступ только определённым спискам друзей необходимо указать значение параметра в соответствующем формате: 
            lists: listId, flistId, ... Списки друзей Вы можете получить используя метод <see cref="M:VkNet.Categories.FriendsCategory.GetLists"/>.
            </item>
            </list>
            </param>
            <param name="privacyComment">Настройки приватности для добавления комментариев  видео. 
            Формат задания тот же, что и для <paramref name="privacyView"/>.
            </param>
            <param name="isRepeat">Зацикливание воспроизведения видеозаписи.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.edit"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Add(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Добавляет видеозапись в список пользователя.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>После успешного выполнения возвращает идентификатор созданной видеозаписи.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.add"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Save(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Возвращает адрес сервера (необходимый для загрузки) и данные видеозаписи.
            </summary>
            <param name="name">Название видеофайла.</param>
            <param name="description">Описание видеофайла.</param>
            <param name="isPrivate">Указывается true в случае последующей отправки видеозаписи личным сообщением. После загрузки с этим 
            параметром видеозапись не будет отображаться в списке видеозаписей пользователя и не будет доступна другим пользователям 
            по id.</param>
            <param name="isPostToWall">Требуется ли после сохранения опубликовать запись с видео на стене.</param>
            <param name="link">Url для встраивания видео с внешнего сайта, например, с youtube. В этом случае нужно вызвать полученный 
            <see cref="P:VkNet.Model.Attachments.Video.UploadUrl"/>, не прикрепляя файл, достаточно просто обратиться по этому адресу.</param>
            <param name="groupId">Идентификатор сообщества, в которое будет сохранен видеофайл. По умолчанию файл сохраняется на страницу
            текущего пользователя.</param>
            <param name="albumId">Идентификатор альбома, в который будет загружен видео файл.</param>
            <param name="isRepeat">Зацикливание воспроизведения видеозаписи.</param>
            <returns>Возвращает объект видеозаписи, который имеет поля <see cref="P:VkNet.Model.Attachments.Video.UploadUrl"/>, <see cref="P:VkNet.Model.Attachments.MediaAttachment.Id"/>, 
            <see cref="P:VkNet.Model.Attachments.Video.Title"/>, <see cref="P:VkNet.Model.Attachments.Video.Description"/> и <see cref="P:VkNet.Model.Attachments.MediaAttachment.OwnerId"/>.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.save"/>.
            Метод может быть вызван не более 5000 раз в сутки для одного сервиса. 
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Delete(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет видеозапись со страницы пользователя.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную видеозапись.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Если <paramref name="ownerId"/> не указан, то производится восстановление видеозаписи у текущего пользователя.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.restorehttp://vk.com/dev/video.restore"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Search(System.String,VkNet.Enums.VideoSort,System.Boolean,System.Boolean,VkNet.Enums.Filters.VideoFilters,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список видеозаписей в соответствии с заданным критерием поиска.
            </summary>
            <param name="query">Строка поискового запроса.</param>
            <param name="sort">Вид сортировки.</param>
            <param name="isHd">Если true, то поиск производится только по видеозаписям высокого качества.</param>
            <param name="isAdult">Фильтр «Безопасный поиск».</param>
            <param name="filters">Список критериев, по которым требуется отфильтровать видео.</param>
            <param name="isSearchOwn">Искать по видеозаписям пользователя.</param>
            <param name="count">
            Количество возвращаемых видеозаписей.
            Обратите внимание — даже при использовании параметра <paramref name="offset"/> для получения информации доступны только первые 1000 результатов. 
            </param>
            <param name="offset">Смещение относительно первой найденной видеозаписи для выборки определенного подмножества.</param>
            <returns>После успешного выполнения возвращает список объектов видеозаписей.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetUserVideos(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список видеозаписей, на которых отмечен пользователь.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="count">Количество возвращаемых видеозаписей.</param>
            <param name="offset">Смещение относительно первой найденной видеозаписи для выборки определенного подмножества.</param>
            <returns>После успешного выполнения возвращает список объектов видеозаписей.</returns>
            <remarks>
            ЭТОТ МЕТОД ВЫБРАСЫВАЕТ ИСКЛЮЧЕНИЕ НА СЕРВЕРЕ ВК!!!
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getUserVideos"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbums(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает список альбомов видеозаписей пользователя или сообщества.
            </summary>
            <param name="ownerId">Идентификатор владельца альбомов (пользователь или сообщество). По умолчанию — идентификатор текущего 
            пользователя.</param>
            <param name="count">Количество альбомов, информацию о которых нужно вернуть.
            По умолчанию — не больше 50, максимум — 100. 
            </param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества альбомов.</param>
            <param name="extended">true – позволяет получать поля <see cref="P:VkNet.Model.VideoAlbum.Count"/>, <see cref="P:VkNet.Model.VideoAlbum.Photo160"/> и 
            <see cref="P:VkNet.Model.VideoAlbum.Photo320"/> для каждого альбома.</param>
            <returns>
            После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.VideoAlbum"/>, каждый из которых содержит следующие 
            поля: <see cref="P:VkNet.Model.VideoAlbum.Id"/>, <see cref="P:VkNet.Model.VideoAlbum.OwnerId"/> и <see cref="P:VkNet.Model.VideoAlbum.Title"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getAlbums"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddAlbum(System.String,System.Nullable{System.Int64})">
            <summary>
            Создает пустой альбом видеозаписей.
            </summary>
            <param name="title">Название альбома.</param>
            <param name="groupId">Идентификатор сообщества (если необходимо создать альбом в сообществе).</param>
            <returns>После успешного выполнения возвращает идентификатор созданного альбома.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.addAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditAlbum(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Редактирует название альбома видеозаписей.
            </summary>
            <param name="albumId">Идентификатор альбома.</param>
            <param name="title">Новое название для альбома.</param>
            <param name="groupId">Идентификатор сообщества (если нужно отредактировать альбом, принадлежащий сообществу).</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.editAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет альбом видеозаписей.
            </summary>
            <param name="albumId">Идентификатор альбома.</param>
            <param name="groupId">Идентификатор сообщества (если альбом, который необходимо удалить, принадлежит сообществу).</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.deleteAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.MoveToAlbum(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Nullable{System.Int64})">
            <summary>
            Перемещает видеозаписи в альбом.
            </summary>
            <param name="videoIds">Список идентификаторов видеороликов.</param>
            <param name="albumId">Идентификатор альбома, в который перемещаются видеозаписи.</param>
            <param name="groupId">Идентификатор сообщества, которому принадлежат видеозаписи. Если параметр не указан, то работа 
            ведется с альбомом текущего пользователя.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.moveToAlbum"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetComments(System.Int64,System.Nullable{System.Int64},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.SafetyEnums.CommentsSort)">
            <summary>
            Возвращает список комментариев к видеозаписи.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="needLikes">true — будет возвращено дополнительное поле <see cref="P:VkNet.Model.Comment.Likes"/>. По умолчанию поле <see cref="P:VkNet.Model.Comment.Likes"/> 
            не возвращается.</param>
            <param name="count">Количество комментариев, информацию о которых необходимо вернуть.
            (по умолчанию 20, максимальное значение 100).
            </param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества комментариев.</param>
            <param name="sort">Порядок сортировки комментариев.</param>
            <returns>После успешного выполнения возвращает общее количество комментариев и массив объектов <see cref="T:VkNet.Model.Comment"/>.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getComments"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.CreateComment(VkNet.Model.Attachments.Attachment)">
            <summary>
            ДАННЫЙ МЕТОД НЕ РЕАЛИЗОВАН!!!
            </summary>
            <param name="attach"></param>
            <returns></returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.createComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.CreateComment(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Cоздает новый комментарий к видеозаписи.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="message">Текст комментария.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="isFromGroup">Данный параметр учитывается, если <paramref name="ownerId"/> &lt; 0 (комментарий к видеозаписи группы). 
            true — комментарий будет опубликован от имени группы, false — комментарий будет опубликован от имени пользователя.
            (по умолчанию).</param>
            <returns>После успешного выполнения возвращает идентификатор созданного комментария.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.createComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteComment(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к видеозаписи.
            </summary>
            <param name="commentId">Идентификатор комментария.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.deleteComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к видеозаписи.
            </summary>
            <param name="commentId">Идентификатор удаленного комментария.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>После успешного выполнения возвращает true, false если комментарий с таким идентификатором не является удаленным.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.restoreComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditComment(VkNet.Model.Attachments.Attachment)">
            <summary>
            ДАННЫЙ МЕТОД НЕ РЕАЛИЗОВАН!!!
            </summary>
            <param name="attach"></param>
            <returns></returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.editComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Изменяет текст комментария к видеозаписи.
            </summary>
            <param name="commentId">Идентификатор комментария.</param>
            <param name="message">Новый текст комментария.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор сообщества в параметре <paramref name="ownerId"/> необходимо указывать со знаком "-" — например, 
            <paramref name="ownerId"/>=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.editComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetTags(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список отметок на видеозаписи. 
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор владельца видеозаписи (пользователь или сообщество). По умолчанию — идентификатор текущего пользователя.</param>
            <returns>После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.Tag"/>, каждый из которых содержит следующие поля:
            <see cref="P:VkNet.Model.Tag.Id"/>, <see cref="P:VkNet.Model.Tag.Id"/>, <see cref="P:VkNet.Model.Tag.PlacerId"/>, <see cref="P:VkNet.Model.Tag.Name"/>, <see cref="P:VkNet.Model.Tag.Date"/> и <see cref="P:VkNet.Model.Tag.IsViewed"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getTags"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.PutTag(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Добавляет отметку на видеозапись. 
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="userId">Идентификатор пользователя, которого нужно отметить.</param>
            <param name="ownerId">Идентификатор владельца видеозаписи (пользователь или сообщество). По умолчанию — идентификатор текущего пользователя.</param>
            <param name="taggedName">Текст отметки.</param>
            <returns>После успешного выполнения возвращает идентификатор созданной отметки <see cref="P:VkNet.Model.Tag.Id"/>.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.putTag"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RemoveTag(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет отметку с видеозаписи. 
            </summary>
            <param name="tagId">Идентификатор отметки.</param>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="ownerId">Идентификатор владельца видеозаписи (пользователь или сообщество). По умолчанию — идентификатор текущего пользователя.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.removeTag"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetNewTags(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список видеозаписей, на которых есть непросмотренные отметки. 
            </summary>
            <param name="count">Количество видеозаписей, которые необходимо вернуть (максимальное значение 100, по умолчанию 20).
            </param>
            <param name="offset">Смещение, необходимое для получения определённого подмножества видеозаписей.</param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Video"/> с дополнительным полем <see cref="P:VkNet.Model.Attachments.Video.Tag"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getNewTags"/>.
            </remarks>        
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Report(System.Int64,VkNet.Enums.VideoReportType,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Позволяет пожаловаться на видеозапись.
            </summary>
            <param name="videoId">Идентификатор видеозаписи.</param>
            <param name="reason">Тип жалобы.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, которому принадлежит видеозапись.</param>
            <param name="comment">Комментарий для жалобы.</param>
            <param name="searchQuery">Поисковой запрос, если видеозапись была найдена через поиск.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.report"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.VideoReportType)">
            <summary>
            Позволяет пожаловаться на комментарий к видеозаписи.
            </summary>
            <param name="commentId">Идентификатор комментария.</param>
            <param name="ownerId">Идентификатор владельца видеозаписи, к которой оставлен комментарий.</param>
            <param name="reason">Тип жалобы</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Video"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.reportComment"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Categories.WallCategory">
            <summary>
            Методы для работы со стеной пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Get(System.Int64,System.Int32@,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.WallFilter)">
            <summary>
            Возвращает список записей со стены пользователя или сообщества. 
            </summary>
            <param name="ownerId">Идентификатор пользователя. Чтобы получить записи со стены группы (публичной страницы, встречи), укажите её идентификатор 
            со знаком "минус": например, owner_id=-1 соответствует группе с идентификатором 1.</param>
            <param name="totalCount">Общее количество записей на стене.</param>
            <param name="count">Количество сообщений, которое необходимо получить (но не более 100).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества сообщений.</param>
            <param name="filter">Типы сообщений, которые необходимо получить (по умолчанию возвращаются все сообщения).</param>
            <returns>В случае успеха возвращается запрошенный список записей со стены.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetExtended(System.Int64,System.Collections.ObjectModel.ReadOnlyCollection{VkNet.Model.Post}@,System.Collections.ObjectModel.ReadOnlyCollection{VkNet.Model.User}@,System.Collections.ObjectModel.ReadOnlyCollection{VkNet.Model.Group}@,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.WallFilter)">
            <summary>
            Возвращает три  коллекции в out параметрах <paramref name="wallPosts"/>, <paramref name="profiles"/> и <paramref name="groups"/>. 
            </summary>
            <param name="ownerId">Идентификатор пользователя. Чтобы получить записи со стены группы (публичной страницы, встречи), укажите её идентификатор 
            со знаком "минус": например, owner_id=-1 соответствует группе с идентификатором 1.</param>
            <param name="wallPosts">Коллекция записей на стене.</param>
            <param name="profiles">Коллекция профилей, так или иначе связанных с полученными в <paramref name="wallPosts"/> записями.</param>
            <param name="groups">Коллекция групп, так или иначе связанных с полученными в <paramref name="wallPosts"/> записями.</param>
            <param name="count">Количество сообщений, которое необходимо получить (но не более 100).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества сообщений.</param>
            <param name="filter">Типы сообщений, которые необходимо получить (по умолчанию возвращаются все сообщения).</param>
            <returns>В случае успеха возвращается количество записей на стене.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.get"/>, для случая, когда параметр extended = 1.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetComments(System.Int64,System.Int64,System.Int32@,VkNet.Enums.SafetyEnums.CommentsSort,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Возвращает список комментариев к записи на стене пользователя. 
            </summary>
            <param name="ownerId">Идентификатор пользователя, на чьей стене находится запись, к которой необходимо получить комментарии.</param>
            <param name="postId">Идентификатор записи на стене пользователя.</param>
            <param name="totalCount">Общее количество комментариев к записи.</param>
            <param name="sort">Порядок сортировки комментариев (по умолчанию хронологический).</param>
            <param name="needLikes">Признак нужно ли возвращать поле Likes в комментариях.</param>
            <param name="count">Количество комментариев, которое необходимо получить (но не более 100).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества комментариев.</param>
            <param name="previewLength">Количество символов, по которому нужно обрезать комментарии. Если указано 0, то комментарии не образеютяс. 
            Обратите внимание, что комментарии обрезаются по словам.</param>
            <returns>
            Список комментариев к записи на стене пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.getComments"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetById(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает список записей со стен пользователей или сообществ по их идентификаторам.
            </summary>
            <param name="posts">
            Список строковых идентификаторов записий в формате - идентификатор пользователя (группы), знак подчеркивания и идентификатор записи.
            Примеры возможных значений идентификаторов: "93388_21539", "93388_20904", "-2943_4276".
            </param>
            <returns>
            После успешного выполнения возвращает список объектов записей со стены. 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetById(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,System.Int64}})">
            <summary>
            Возвращает список записей со стен пользователей или сообществ по их идентификаторам.
            </summary>
            <param name="posts">
            Список идентификаторов записей. Key - идентификатор пользователя (группы), Value - идентификатор записи (положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов записей со стены. 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.getById"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Post(System.Nullable{System.Int64},System.Boolean,System.Boolean,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment},System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Публикует новую запись на своей или чужой стене. 
            Данный метод позволяет создать новую запись на стене, а также опубликовать предложенную новость или отложенную запись. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, на стене которого должна быть опубликована запись. </param>
            <param name="friendsOnly">Доступна ли запись только друзьям (по умолчанию - доступна всем).</param>
            <param name="fromGroup">При публикации в группе показывает, от чьего имени публикуется запись (по умолчанию - от имени пользователя).</param>
            <param name="message">Тескт сообщения. Обязательное поле, если список <paramref name="mediaAttachments"/> не задан или пуст.</param>
            <param name="mediaAttachments">Список приложенных к записи объектов. 
            Обязательно наличие хотя бы одного элемента в списке, если <paramref name="message"/> не задано. 
            Свойства <see cref="P:VkNet.Model.Attachments.MediaAttachment.Id"/> и <see cref="P:VkNet.Model.Attachments.MediaAttachment.OwnerId"/> обязательно должны быть заданы. </param>
            <param name="url">Ссылка на внешнюю страницу. В строке может содержаться только одна ссылка.</param>
            <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать запись, в случае если пользователь настроил соответствующую опцию.
             Например, twitter, facebook</param>
            <param name="signed">Добавляется ли подпись (имя опубликовавшего) к записи в группе, если запись сделана от имени группы.</param>
            <param name="publishDate">Дата публикации записи. Если параметр указан, публикация записи будет отложена до указанного времени. </param>
            <param name="lat">Географическая широта отметки, заданная в градусах (от -90 до 90).</param>
            <param name="long">Географическая долгота отметки, заданная в градусах (от -180 до 180).</param>
            <param name="placeId">Идентификатор места, в котором отмечен пользователь (положительное число).</param>
            <param name="postId">Идентификатор записи, которую необходимо опубликовать. 
            Данный параметр используется для публикации отложенных записей и предложенных новостей.
            При публикации отложенной записи все параметры кроме owner_id и post_id игнорируются. </param>
            <returns>Идентификатор созданной записи</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.post"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Repost(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Копирует объект на стену пользователя или сообщества. 
            </summary>
            <param name="object">Строковый идентификатор объекта, который необходимо разместить на стене, например, wall66748_3675 или wall-1_340364.</param>
            <param name="message">Сопроводительный текст, который будет добавлен к записи с объектом.</param>
            <param name="groupId">Идентификатор сообщества, на стене которого будет размещена запись с объектом. 
            Если не указан, запись будет размещена на стене текущего пользователя. </param>
            <returns>Результат выполнения копирвоания и информация о скопированном объекте.</returns>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Edit(System.Int64,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment},System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int64})">
            <summary>
            Редактирует запись на стене. 
            </summary>
            <param name="postId">Идентификатор записи, которую необходимо отредактировать.</param>
            <param name="ownerId">Идентификатор пользователя или сообщества, на стене которого опубликована запись.</param>
            <param name="friendsOnly">Доступна ли запись только друзьям (по умолчанию - доступна всем).</param>
            <param name="message">Тескт сообщения. Обязательное поле, если список <paramref name="mediaAttachments"/> не задан или пуст.</param>
            <param name="mediaAttachments">Список приложенных к записи объектов. 
            Обязательно наличие хотя бы одного элемента в списке, если <paramref name="message"/> не задано. 
            Свойства <see cref="P:VkNet.Model.Attachments.MediaAttachment.Id"/> и <see cref="P:VkNet.Model.Attachments.MediaAttachment.OwnerId"/> обязательно должны быть заданы. </param>
            <param name="url">Ссылка на внешнюю страницу. В строке может содержаться только одна ссылка.</param>
            <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать запись, в случае если пользователь настроил соответствующую опцию.
             Например, twitter, facebook</param>
            <param name="signed">Добавляется ли подпись (имя опубликовавшего) к записи в группе, если запись сделана от имени группы.</param>
            <param name="publishDate">Дата публикации записи. Если параметр не указан, отложенная запись будет опубликована. 
            Параметр учитывается только при редактировании отложенной записи.</param>
            <param name="lat">Географическая широта отметки, заданная в градусах (от -90 до 90).</param>
            <param name="long">Географическая долгота отметки, заданная в градусах (от -180 до 180).</param>
            <param name="placeId">Идентификатор места, в котором отмечен пользователь (положительное число).</param>
            <returns>Результат выполнения редактирования.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.edit"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет запись со стены. 
            </summary>
            <param name="ownerId">Идентификатор пользователя или сообщества, на стене которого находится запись.</param>
            <param name="postId">Идентификатор записи на стене.</param>
            <returns>
            После успешного выполнения возвращает true.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Restore">
            <summary>
            Восстанавливает удаленную запись на стене пользователя или сообщества. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.restore"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.AddComment">
            <summary>
            Добавляет комментарий к записи на стене пользователя или сообщества. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.addComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.DeleteComment(System.Int64,System.Int64)">
            <summary>
            Удаляет комментарий текущего пользователя к записи на своей или чужой стене. 
            </summary>
            <param name="commentId">Идентификатор пользователя, на чьей стене находится комментарий к записи. </param>
            <param name="ownerId">Идентификатор комментария.</param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.deleteComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.RestoreComment">
            <summary>
            Восстанавливает комментарий текущего пользователя к записи на своей или чужой стене. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.restoreComment"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.AddLike">
            <summary>
            Добавляет запись на стене пользователя или сообщества в список Мне нравится, а также создает копию понравившейся записи на 
            стене текущего пользователя при необходимости. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.addLike"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.WallCategory.DeleteLike">
            <summary>
            Удаляет запись на стене пользователя из списка Мне нравится. 
            </summary>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Wall"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/wall.deleteLike"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Enums.AddFriendStatus">
            <summary>
            Статус, возвращаемый после отправки запроса на добавления в друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Unknown">
            <summary>
            Статус в случае ошибки ответа
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Sended">
            <summary>
            заявка на добавление данного пользователя в друзья отправлена
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Accepted">
            <summary>
            заявка на добавление в друзья от данного пользователя одобрена
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Resubmit">
            <summary>
            повторная отправка заявки
            </summary>
        </member>
        <member name="T:VkNet.Enums.AdminLevel">
            <summary>
            Административные полномочия пользователя в сообществе.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Moderator">
            <summary>
            Пользователь является модератором собщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Editor">
            <summary>
            Пользователь является редактором сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Administrator">
            <summary>
            Пользователь является администратором сообщества.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Attitude">
            <summary>
            Отношение к чему-либо (алкоголю, курению и т.п.).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.VeryNegative">
            <summary>
            Резко негативное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Negative">
            <summary>
            Негативное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Compromise">
            <summary>
            Компромиссное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Neutral">
            <summary>
            Нейтральное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Positive">
            <summary>
            Положительное.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AudioGenre">
            <summary>
            Идентификаторы жанров музыки.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio_object#/dev/audio_genres"/>.
            </remarks>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Rock">
            <summary>
            Рок музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Pop">
            <summary>
            Популярная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.RapAndHipHop">
            <summary>
            Реп и хип-хоп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.EasyListening">
            <summary>
            Легкая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.DanceAndHouse">
            <summary>
            Танцевальная и хаус музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Instrumental">
            <summary>
            Инструментальная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Metal">
            <summary>
            Метал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Alternative">
            <summary>
            Альтернативная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Dubstep">
            <summary>
            Дабстеп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.JazzAndBlues">
            <summary>
            Джаз и блюз.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.DrumAndBass">
            <summary>
            Драм-н-бэйс.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Trance">
            <summary>
            Транс.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Chanson">
            <summary>
            Шансон.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Ethnic">
            <summary>
            Этническая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.AcousticAndVocal">
            <summary>
            Акустическая музыка и вокал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Reggae">
            <summary>
            Регги.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Classical">
            <summary>
            Классическая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.IndiePop">
            <summary>
            Инди-поп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Speech">
            <summary>
            Спич.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.ElectropopAndDisco">
            <summary>
            Электро-поп и диско.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Other">
            <summary>
            Другая музыка.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AudioSort">
            <summary>
            Способ сортировки аудиозаписей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.AddedDate">
            <summary>
            Сортировать по дате добавления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.Duration">
            <summary>
            Сортировать подлительности.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.Popularity">
            <summary>
            Сортировать по популярности.
            </summary>
        </member>
        <member name="T:VkNet.Enums.BanReason">
            <summary>
            Причина бана
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.Other">
            <summary>
            Другое.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.Spam">
            <summary>
            Спам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.VerbalAbuse">
            <summary>
            Оскорбление участников.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.StrongLanguage">
            <summary>
            Нецензурные выражения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.IrrelevantMessages">
            <summary>
            Сообщения не по теме.
            </summary>
        </member>
        <member name="T:VkNet.Enums.BirthdayVisibility">
            <summary>
            Видимость даты рождения
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.Invisible">
            <summary>
            Не показывать дату рождения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.Full">
            <summary>
            ПОказывать дату рождения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.OnlyDayAndMonth">
            <summary>
            Показывать только месяц и день.
            </summary>
        </member>
        <member name="T:VkNet.Enums.ChangeNameStatus">
            <summary>
            Статус заявки на изменение имени
            </summary>
        </member>
        <member name="F:VkNet.Enums.ChangeNameStatus.Processing">
            <summary>
            Заявка рассматривается
            </summary>
        </member>
        <member name="F:VkNet.Enums.ChangeNameStatus.Declined">
            <summary>
            Заявка отклонена
            </summary>
        </member>
        <member name="F:VkNet.Enums.ChangeNameStatus.Success">
            <summary>
            Имя было успешно изменено
            </summary>
        </member>
        <member name="F:VkNet.Enums.ChangeNameStatus.WasAccepted">
            <summary>
            Недавно уже была одобрена заявка, повторную заявку можно подать не раньше даты, указанной в поле <see cref="P:VkNet.Model.ChangeNameRequest.RepeatDate"/>
            </summary>
        </member>
        <member name="F:VkNet.Enums.ChangeNameStatus.WasDeclined">
            <summary>
            Предыдущая заявка была отклонена, повторную заявку можно подать не раньше даты, указанной в поле <see cref="P:VkNet.Model.ChangeNameRequest.RepeatDate"/>
            </summary>
        </member>
        <member name="T:VkNet.Enums.DeleteFriendStatus">
            <summary>
            Возвращаемый статус после удаления пользователя из списка друзей
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.Unknown">
            <summary>
            Неопределенный статус ответа
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.UserIsDeleted">
            <summary>
            Пользователь удален из списка друзей
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.RequestRejected">
            <summary>
            Заявка на добавление в друзья от данного пользователя отклонена
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.RecommendationDeleted">
            <summary>
            Рекомендация добавить в друзья данного пользователя удалена
            </summary>
        </member>
        <member name="T:VkNet.Enums.FriendStatus">
            <summary>
            Состояние дружбы с пользователями.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.NotFriend">
            <summary>
            Пользователь не является другом.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.OutputRequest">
            <summary>
            Пользователю отправлена заявка/подписка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.InputRequest">
            <summary>
            Имеется входящая заявка/подписка от пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.Friend">
            <summary>
            Пользователь является другом.
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupPublicity">
            <summary>
            Информация о публичности сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Public">
            <summary>
            Сообщество является публичным.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Closed">
            <summary>
            Сообщество является закрытым.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Private">
            <summary>
            Сообщество является частным.
            </summary>
        </member>
        <member name="T:VkNet.Enums.LifeMain">
            <summary>
            Главное в жизни.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.FamilyAndChildren">
            <summary>
            Семья и дети.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.CareerAndMoney">
            <summary>
            Карьера и деньги.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.Activities">
            <summary>
            Развлечения и отдых.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.ScienceAndResearch">
            <summary>
            Наука и исследования.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.ImprovingTheWorld">
            <summary>
            Совершенствование мира.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.SelfDevelopment">
            <summary>
            Саморазвитие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.BeautyAndArt">
            <summary>
            Красота и искусство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.FameAndInfluence">
            <summary>
            Слава и влияние.
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessageReadState">
            <summary>
            Информация о том прочитано ли сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageReadState.Unreaded">
            <summary>
            Сообщение не прочитано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageReadState.Readed">
            <summary>
            Сообщение прочитано.
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessagesFilter">
            <summary>
            Фильтр для отбора сообщений.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessagesFilter.All">
            <summary>
            Все сообщения
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessagesFilter.Important">
            <summary>
            Важные сообщения 
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageType.Received">
            <summary>
            Полученное сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageType.Sended">
            <summary>
            Отправленное сообщение.
            </summary>
        </member>
        <member name="T:VkNet.Enums.PageAccessKind">
            <summary>
            Режим доступа к странице
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.OnlyAdministrators">
            <summary>
            Доступ только руководителям сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.OnlyMembers">
            <summary>
            Доступ только членам сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.Unrestricted">
            <summary>
            Неограниченный доступ.
            </summary>
        </member>
        <member name="T:VkNet.Enums.PeopleMain">
            <summary>
            Главное в людях.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.MindAndCreativity">
            <summary>
            Ум и креативность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.KindnessAndHonesty">
            <summary>
            Доброта и честность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.HealthAndBeauty">
            <summary>
            Красота и здоровье.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.PowerAndWealth">
            <summary>
            Власть и богатство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.CourageAndPersistence">
            <summary>
            Смелость и упорство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.HumorAndLoveForLife">
            <summary>
            Юмор и жизнелюбие.
            </summary>
        </member>
        <member name="T:VkNet.Enums.PoliticalPreferences">
            <summary>
            Политические предпочтения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Unknown">
            <summary>
            Не указаны.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Communist">
            <summary>
            Коммунистические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Socialist">
            <summary>
            Социалистические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Moderate">
            <summary>
            Умеренные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Liberal">
            <summary>
            Либеральные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Conservative">
            <summary>
            Консервативные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Monarchist">
            <summary>
            Монархические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Ultraconservative">
            <summary>
            Ультраконсервативные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Apathetic">
            <summary>
            Индифферентные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Libertarian">
            <summary>
            Либертантские.
            </summary>
        </member>
        <member name="T:VkNet.Enums.RelationType">
            <summary>
            Семейное положение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.NotMarried">
            <summary>
            Не женат/не замужем.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.HasFriend">
            <summary>
            Встречаюсь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Engaged">
            <summary>
            Помолвлен/помолвлена.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Married">
            <summary>
            Женат/замужем.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.ItsComplex">
            <summary>
            Всё сложно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.InActiveSearch">
            <summary>
            В активном поиске.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Amorous">
            <summary>
            Влюблен/влюблена.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LikeObjectType">
            <summary>
            Тип объекта (исп. в категории Likes)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Post">
            <summary>
            Запись на стене пользователя или группы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Comment">
            <summary>
            Комментарий к записи на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Photo">
            <summary>
            Фотография
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Audio">
            <summary>
            Аудиозапись
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Video">
            <summary>
            Видеозапись
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Note">
            <summary>
            Заметка
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.PhotoComment">
            <summary>
            Комментарий к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.VideoComment">
            <summary>
            Комментарий к видеозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.TopicComment">
            <summary>
            Комментарий в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.SitePage">
            <summary>
            Страница сайта, на котором установлен виджет «Мне нравится»
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PhotoAlbumType">
            <summary>
            Тип служебного альбома с фотографиями
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Wall">
            <summary>
            Фотографии со стены
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Profile">
            <summary>
            Аватары
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Saved">
            <summary>
            Сохраненные фотографии
            </summary>
        </member>
        <member name="T:VkNet.Enums.Sex">
            <summary>
            Пол.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Unknown">
            <summary>
            Не указан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Female">
            <summary>
            Женский.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Male">
            <summary>
            Мужской.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VideoReportType">
            <summary>
            Тип жалобы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.Spam">
            <summary>
            Это спам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.ChildPornography">
            <summary>
            Детская порнография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.Extremism">
            <summary>
            Экстремизм.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.Violence">
            <summary>
            Насилие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.DrugPropaganda">
            <summary>
            Пропаганда наркотиков.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.AdultMaterial">
            <summary>
            Материал для взрослых.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoReportType.Abuse">
            <summary>
            Оскорбление.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VideoSort">
            <summary>
            Способ сортировки видеозаписей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.AddedDate">
            <summary>
            По дате добавления видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.Duration">
            <summary>
            По длительности видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.Relevance">
            <summary>
            По релевантности видеозаписи запросу.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VideoWidth">
            <summary>
            Информация о ширине видео в пикселах.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.get"/>.
            </remarks>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Small130">
            <summary>
            130 пикселов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Medium160">
            <summary>
            160 пикселов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Large320">
            <summary>
            320 пикселов.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VkObjectType">
            <summary>
            Определяет тип объекта
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.User">
            <summary>
            Пользователь
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.Group">
            <summary>
            Группа
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.Application">
            <summary>
            Приложение
            </summary>
        </member>
        <member name="T:VkNet.Enums.WallFilter">
            <summary>
            Фильтр для задания типов сообщений, которые необходимо получить со стены.
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallFilter.Owner">
            <summary>
            Необходимо получить сообщения на стене только от ее владельца.
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallFilter.Others">
            <summary>
            Необходимо получить сообщения на стене не от владельца стены.
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallFilter.All">
            <summary>
            Необходимо получить все сообщения на стене (Owner + Others).
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallFilter.Suggests">
            <summary>
            Отложенные записи
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallFilter.Postponed">
            <summary>
            Предложенные записи на стене сообщества
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.CommentsSort">
            <summary>
            Порядок сортировки комментариев к записи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentsSort.Asc">
            <summary>
            В хронологическом порядке (от старых к новым).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentsSort.Desc">
            <summary>
            В порядке, обратном хронологическому (от новых к старым).
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Display">
            <summary>
            Возможные значения параметра display, задающего внешний вид окна авторизации.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Page">
            <summary>
            Обычная страница.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Popup">
            <summary>
            Всплывающее окно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Wap">
            <summary>
            Для мобильных устройств.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupsFields">
            <summary>
            Описание дополнительных полей сообщества, используемых в параметре fields (например, в методе <see cref="M:VkNet.Categories.GroupsCategory.Get(System.Int64,System.Boolean,VkNet.Enums.Filters.GroupsFilters,VkNet.Enums.Filters.GroupsFields,System.Int32,System.Int32)"/>).
            См. описание <see href="http://vk.com/dev/groups.get"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CityId">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CityId"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CountryId">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CountryId"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Place">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Place"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Description">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Description"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.WikiPage">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.WikiPage"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.MembersCount">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.MembersCount"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Counters">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Counters"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.StartDate">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.StartDate"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.EndDate">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.EndDate"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanPost">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CanPost"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanSeelAllPosts">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CanSeelAllPosts"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanUploadDocuments">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CanUploadDocuments"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanCreateTopic">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.CanCreateTopic"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Activity">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Activity"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Status">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Status"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Contacts">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Contacts"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Links">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Links"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.FixedPostId">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.FixedPostId"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.IsVerified">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.IsVerified"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Site">
            <summary>
            Для получения дополнительного поля <see cref="P:VkNet.Model.Group.Site"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.All">
            <summary>
            Для получения всех дополнительных полей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.AllUndocumented">
            <summary>
            Для получения всех дополнительных полей (оказалаось, что некоторые поля пропущены в документации).
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupsFilters">
            <summary>
            Фильтры сообществ пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Administrator">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Editor">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором или редактором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Moderator">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором, редактором или модератором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Groups">
            <summary>
            Вернуть все группы, в которые входит пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Publics">
            <summary>
            Вернуть все публичные страницы пользователя ???
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Events">
            <summary>
            Вернуть все события, в которых участвует пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.All">
            <summary>
            Вернуть все сообщества, в которых задействован пользователь.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupsSort">
            <summary>
            Порядок сортировки членов группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.IdAsc">
            <summary>
            По возрастанию численных значений идентификаторов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.IdDesc">
            <summary>
            По убыванию численных значений идентификаторов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.TimeAsc">
            <summary>
            По возрастанию времени присоединения к группе.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.TimeDesc">
            <summary>
            По убыванию времени присоединения к группе.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupType">
            <summary>
            Тип сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Page">
            <summary>
            Публичная страница.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Group">
            <summary>
            Группа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Event">
            <summary>
            Мероприятие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Undefined">
            <summary>
            Не определено.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LinkAccessType">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на сайте ВКонтакте.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.NotBanned">
            <summary>
            Cсылка не заблокирована
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.Banned">
            <summary>
            Cсылка заблокирована
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.Processing">
            <summary>
            Cсылка проверяется; необходимо выполнить повторный запрос через несколько секунд
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.FriendsOrder">
            <summary>
            Порядок, в котором необходимо вернуть список друзей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Name">
            <summary>
            Сортировать по имени (работает только при переданном параметре fields). 
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Hints">
            <summary>
            Сортировать по рейтингу, аналогично тому, как друзья сортируются в разделе "Мои друзья".
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Random">
            <summary>
            Возвращает друзей в случайном порядке.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.NameCase">
            <summary>
            Падеж.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Nom">
            <summary>
            Именительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Gen">
            <summary>
            Родительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Dat">
            <summary>
            Дательный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Acc">
            <summary>
            Винительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Ins">
            <summary>
            Творительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Abl">
            <summary>
            Предложный.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.ProfileFields">
            <summary>
            Требуемые для получения поля профиля.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_полей_параметра_fields"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Uid">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Id"/>. Это поле возвращается всегда, поэтому его можно не указывать.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FirstName">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.FirstName"/>. Это поле возвращается всегда, поэтому его можно не указывать.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.LastName">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.LastName"/>. Это поле возвращается всегда, поэтому его можно не указывать.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Sex">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Sex"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.BirthDate">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.BirthDate"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.City">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.City"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Country">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Country"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo50">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.Photo50"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo100">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.Photo100"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo200">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.Photo200"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo200Orig">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.Photo200"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo400Orig">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.Photo400"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.PhotoMax">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.PhotoMax"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.PhotoMaxOrig">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.Previews.PhotoMax"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Online">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Online"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FriendLists">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.FriendLists"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Domain">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Domain"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.HasMobile">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.HasMobile"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Contacts">
            <summary>
            Для получения полей <see cref="P:VkNet.Model.User.MobilePhone"/> и <see cref="P:VkNet.Model.User.HomePhone"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Connections">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Connections"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Site">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Site"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Education">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Education"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Universities">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Universities"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Schools">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Schools"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanPost">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.CanPost"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanSeeAllPosts">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.CanSeeAllPosts"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanSeeAudio">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.CanSeeAudio"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanWritePrivateMessage">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.CanWritePrivateMessage"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Status">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Status"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.LastSeen">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.LastSeen"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CommonCount">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.CommonCount"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Relation">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Relation"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Relatives">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Relatives"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Counters">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Counters"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Nickname">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Nickname"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Timezone">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Timezone"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Language">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Language"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.OnlineMobile">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.OnlineMobile"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.OnlineApp">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.OnlineApp"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.RelationPartner">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.RelationPartner"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.StandInLife">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.StandInLife"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Interests">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Interests"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Music">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Music"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Activities">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Activities"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Movies">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Movies"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Tv">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Tv"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Books">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Books"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Games">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Games"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.About">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.About"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Quotes">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.Quotes"/>. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.InvitedBy">
            <summary>
            Для получения поля <see cref="P:VkNet.Model.User.InvitedBy"/>. 
            </summary>        
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.All">
            <summary>
            Для получения всех документированных полей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.AllUndocumented">
            <summary>
            Для получения всех полей, вколючая недокументированные.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ReportType">
            <summary>
            Тип жалобы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Porn">
            <summary>
            Порнография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Spam">
            <summary>
            Рассылка спама.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Insult">
            <summary>
            Оскорбительное поведение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Advertisment">
            <summary>
            Рекламная страница, засоряющая поиск.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.Settings">
            <summary>
            Права доступа приложений.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Права_доступа_приложений"/>.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Notify">
            <summary>
            Пользователь разрешил отправлять ему уведомления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Friends">
            <summary>
            Доступ к друзьям. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Photos">
            <summary>
            Доступ к фотографиям. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Audio">
            <summary>
            Доступ к аудиозаписям. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Video">
            <summary>
            Доступ к видеозаписям. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Pages">
            <summary>
            Доступ к wiki-страницам. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.AddLinkToLeftMenu">
            <summary>
            Добавление ссылки на приложение в меню слева.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Status">
            <summary>
            Доступ к статусу пользователя. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Notes">
            <summary>
            Доступ заметкам пользователя. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Messages">
            <summary>
            Доступ к расширенным методам работы с сообщениями. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Wall">
            <summary>
            Доступ к обычным и расширенным методам работы со стеной.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Ads">
            <summary>
            Доступ к расширенным методам работы с рекламным API. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Offline">
            <summary>
            Доступ к API в любое время со стороннего сервера. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Documents">
            <summary>
            Доступ к документам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Groups">
            <summary>
            Доступ к группам пользователя. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Notifications">
            <summary>
            Доступ к оповещениям об ответах пользователю. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Statistic">
            <summary>
            Доступ к статистике групп и приложений пользователя, администратором которых он является. 
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.Email">
            <summary>
            Доступ к email пользователя. Доступно только для сайтов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.Settings.All">
            <summary>
            Доступ ко всем возможным операциям (без Offline и NoHttps).
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Value">
            <summary>
            Объединенные права доступа.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.SubscribeFilter">
            <summary>
            Список типов уведомлений.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.VideoFilters">
            <summary>
            Cписок критериев, по которым требуется отфильтровать видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Mp4">
            <summary>
            Возвращать видео в формате mp4 (воспроиводимое на iOS).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Youtube">
            <summary>
            Возвращать youtube видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Vimeo">
            <summary>
            Возвращать vimeo видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Short">
            <summary>
            Возвращать короткие видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Long">
            <summary>
            Возвращать длинные видеозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.All">
            <summary>
            Возвращать все доступные виды видео.
            </summary>
        </member>
        <member name="T:VkNet.Exception.AccessDeniedException">
            <summary>
            Исключение, которое выбрасывается при отказе в доступе на выполнение операции сервером ВКонтакте.
            </summary>
        </member>
        <member name="T:VkNet.Exception.VkApiMethodInvokeException">
            <summary>
            Базовый класс, для всех исключений, которые могут произойти при вызове методов API ВКонтакте.
            </summary>
        </member>
        <member name="T:VkNet.Exception.VkApiException">
            <summary>
            Базовый класс для всех исключений, выбрасываемых библиотекой.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/> с указанным описанием и кодом ошибки.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/> с указанным описанием, кодом ошибки и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiMethodInvokeException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="P:VkNet.Exception.VkApiMethodInvokeException.ErrorCode">
            <summary>
            Код ошибки, полученный от сервера ВКонтакте.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/> с указанным описанием и кодом ошибки.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/> с указанным описанием, кодом ошибки и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessDeniedException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="T:VkNet.Exception.AccessTokenInvalidException">
            <summary>
            Исключение, которое выбрасывается, в случае, если предоставленный маркер доступа является недействительным.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessTokenInvalidException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessTokenInvalidException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessTokenInvalidException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessTokenInvalidException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="T:VkNet.Exception.CaptchaNeededException">
            <summary>
            Исключение, выбрасываемое при необходимости ввода капчи для вызова метода
            </summary>
        </member>
        <member name="M:VkNet.Exception.CaptchaNeededException.#ctor(System.Int64,System.String)">
            <summary>
            Создания экземпляра <see cref="T:VkNet.Exception.CaptchaNeededException"/>
            </summary>
            <param name="sid">Сид</param>
            <param name="img">Url-адрес изображения с капчей</param>
        </member>
        <member name="M:VkNet.Exception.CaptchaNeededException.#ctor(System.Int64,System.Uri)">
            <summary>
            Создания экземпляра <see cref="T:VkNet.Exception.CaptchaNeededException"/>
            </summary>
            <param name="sid">Сид</param>
            <param name="img">Url-адрес изображения с капчей</param>
        </member>
        <member name="P:VkNet.Exception.CaptchaNeededException.Sid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Exception.CaptchaNeededException.Img">
            <summary>
            Url-адрес изображения с капчей
            </summary>
        </member>
        <member name="T:VkNet.Exception.InvalidParameterException">
            <summary>
            Исключение, которое выбрасывается в случае, если параметр принимал недействительное значение.
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> с указанным описанием и кодом ошибки.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> с указанным описанием, кодом ошибки и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.InvalidParameterException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="T:VkNet.Exception.PostLimitException">
            <summary>
            Исключение, выбрасываемое при исчерпании лимита публикации постов в день
            </summary>
        </member>
        <member name="T:VkNet.Exception.TooManyRequestsException">
            <summary>
            Исключение, которые выбрасывается при попытке выполнить запрос с частотой, превышающей максимально допустимую ВКонтакте.
            В настоящее время действует ограничение (один раз в три секунды) на количество однотипных запросов (вызовов методов 
            с одним и тем же именем). Если это ограничение превышается, то сервер ВКонтакте возвращает ошибку с кодом 6 - 
            Too many requests per second.
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.TooManyRequestsException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.TooManyRequestsException"/> с указанным описанием.
            </summary>
            <param name="message">Описание исключения.</param>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.TooManyRequestsException"/> с указанным описанием и внутренним исключением.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.TooManyRequestsException"/> с указанным описанием и кодом ошибки.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.TooManyRequestsException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="T:VkNet.Exception.UserAuthorizationFailException">
            <summary>
            Исключение, которое выбрасывается при отсутствии авторизации на выполнение запрошенной операции.
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserAuthorizationFailException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.UserAuthorizationFailException"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserAuthorizationFailException.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.UserAuthorizationFailException"/> с указанным описанием и кодом ошибки.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="code">Код ошибки, полученный от сервера ВКонтакте.</param>
        </member>
        <member name="M:VkNet.Exception.UserAuthorizationFailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.UserAuthorizationFailException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="T:VkNet.Categories.FriendsCategory">
            <summary>
            Методы для работы с друзьями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Get(System.Int64,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.SafetyEnums.FriendsOrder,VkNet.Enums.SafetyEnums.NameCase,System.Nullable{System.Int32})">
            <summary>
            Возвращает список идентификаторов друзей пользователя или расширенную информацию о друзьях пользователя (при использовании параметра fields).
            </summary>
            <param name="uid">Идентификатор пользователя, для которого необходимо получить список друзей.</param>
            <param name="fields">Поля анкеты (профиля), которые необходимо получить.</param>
            <param name="count">Количество друзей, которое нужно вернуть. (по умолчанию – все друзья).</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества друзей.</param>
            <param name="order">Порядок, в котором нужно вернуть список друзей.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя.</param>
            <param name="listId">Идентификатор списка друзей, полученный методом <see cref="M:VkNet.Categories.FriendsCategory.GetLists"/>, друзей из которого необходимо получить. Данный параметр учитывается, только когда параметр uid равен идентификатору текущего пользователя.</param>
            <returns>Список друзей пользователя с заполненными полями (указанными в параметре <paramref name="fields"/>).
            Если значение поля <paramref name="fields"/> не указано, то у возвращаемых друзей заполняется только поле Id.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetAppUsers">
            <summary>
            Возвращает список идентификаторов друзей текущего пользователя, которые установили данное приложение.
            </summary>
            <returns>
            Список идентификаторов друзей текущего пользователя, которые установили данное приложение.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getAppUsers"/>.
            </remarks>      
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetOnline(System.Int64)">
            <summary>
            Возвращает список идентификаторов друзей пользователя, которые сейчас находятся на сайте (online).
            </summary>
            <param name="uid">
            Идентификатор пользователя, для которого необходимо получить список друзей, находящихся на сайте.
            </param>
            <returns>
            В случае успеха список идентификаторов друзей пользователя, которые сейчас находятся на сайте.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getOnline"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetMutual(System.Int64,System.Int64)">
            <summary>
            Возвращает список идентификаторов общих друзей между парой пользователей.
            </summary>
            <param name="targetUid">Идентификатор пользователя, с которым необходимо искать общих друзей.</param>
            <param name="sourceUid">Идентификатор пользователя, чьи друзья пересекаются с друзьями пользователя с идентификатором <paramref name="targetUid"/>.</param>
            <returns>
            В случае успеха возвращает список идентификаторов (id) общих друзей между пользователями с идентификаторами <paramref name="targetUid"/> и <paramref name="sourceUid"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getMutual"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AreFriends(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Возвращает информацию о том добавлен ли текущий пользователь в друзья у указанных пользователей. 
            Также возвращает информацию о наличии исходящей или входящей заявки в друзья (подписки).
            </summary>
            <param name="uids">Список проверяемых идентификаторов пользователей.</param>
            <returns>Метод возвращает словарь, ключом которого является идентификатор пользователя (uid), а значением значение типа <see cref="T:VkNet.Enums.FriendStatus"/>.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.areFriends"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddList(System.String)">
            <summary>
            Создает новый список друзей у текущего пользователя.
            </summary>
            <param name="name">название создаваемого списка друзей.</param>
            <returns>После успешного выполнения возвращает идентификатор созданного списка друзей.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
             Страница документации ВКонтакте <see href="http://vk.com/dev/friends.addList"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddList(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Создает новый список друзей у текущего пользователя.
            </summary>
            <param name="name">Название создаваемого списка друзей.</param>
            <param name="userIds">Идентификаторы пользователей, которых необходимо поместить в созданный список.</param>
            <returns>После успешного выполнения возвращает идентификатор созданного списка друзей.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Friends"/>.
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.addList"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteList(System.Int64)">
            <summary>
            Удаляет существующий список друзей текущего пользователя.
            </summary>
            <param name="listId">идентификатор списка друзей, который необходимо удалить</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.deleteList"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetLists">
            <summary>
            Возвращает список меток друзей текущего пользователя.
            </summary>
            <returns>После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.FriendList"/></returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getLists"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.EditList(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Редактирует существующий список друзей текущего пользователя.
            </summary>
            <param name="listId">идентификатор списка друзей</param>
            <param name="name">название списка друзей</param>
            <param name="userIds">идентификаторы пользователей, включенных в список</param>
            <param name="addUserIds">идентификаторы пользователей, которых необходимо добавить в список. (в случае если не передан user_ids) </param>
            <param name="deleteUserIds">идентификаторы пользователей, которых необходимо изъять из списка. (в случае если не передан user_ids) </param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.editList"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteAllRequests">
            <summary>
            Отмечает все входящие заявки на добавление в друзья как просмотренные
            </summary>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.deleteAllRequests"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Add(System.Int64,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Одобряет или создает заявку на добавление в друзья.
            </summary>
            <param name="userId">идентификатор пользователя, которому необходимо отправить заявку, либо заявку от которого необходимо одобрить.</param>
            <param name="text">текст сопроводительного сообщения для заявки на добавление в друзья. Максимальная длина сообщения — 500 символов.</param>
            <param name="captchaSid">Id капчи (только если для вызова метода необходимо ввести капчу)</param>
            <param name="captchaKey">Текст капчи (только если для вызова метода необходимо ввести капчу)</param>
            <returns>
            После успешного выполнения возвращает одно из следующих значений:
            1 — заявка на добавление данного пользователя в друзья отправлена;
            2 — заявка на добавление в друзья от данного пользователя одобрена;
            4 — повторная отправка заявки.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.add"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Delete(System.Int64)">
            <summary>
            Удаляет пользователя из списка друзей или отклоняет заявку в друзья.
            </summary>
            <param name="userId">идентификатор пользователя, которого необходимо удалить из списка друзей, либо заявку от которого необходимо отклонить.</param>
            <returns>
            После успешного выполнения возвращает одно из следующих значений:
            1 — пользователь удален из списка друзей;
            2 — заявка на добавление в друзья от данного пользователя отклонена;
            3 — рекомендация добавить в друзья данного пользователя удалена.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.delete"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Edit(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Редактирует списки друзей для выбранного друга.
            </summary>
            <param name="userId">идентификатор пользователя (из числа друзей), для которого необходимо отредактировать списки друзей</param>
            <param name="listIds">идентификаторы списков друзей, в которые нужно добавить пользователя</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.edit"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRecent(System.Nullable{System.Int32})">
            <summary>
            Возвращает список идентификаторов недавно добавленных друзей текущего пользователя
            </summary>
            <param name="count">максимальное количество недавно добавленных друзей, которое необходимо получить</param>
            <returns>Идентификаторы недавно добавленных друзей текущего пользователя</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getRecent"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRequests(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Возвращает информацию о полученных или отправленных заявках на добавление в друзья для текущего пользователя
            </summary>
            <param name="count">Максимальное количество заявок на добавление в друзья, которые необходимо получить (не более 1000)</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества заявок на добавление в друзья</param>
            <param name="extended">Определяет, требуется ли возвращать в ответе сообщения от пользователей, подавших заявку на добавление 
            в друзья. И отправителя рекомендации при suggested=true.</param>
            <param name="needMutual">Определяет, требуется ли возвращать в ответе список общих друзей, если они есть. Обратите внимание, 
            что при использовании need_mutual будет возвращено не более 20 заявок.</param>
            <param name="out">false — возвращать полученные заявки в друзья (по умолчанию), true — возвращать отправленные пользователем 
            заявки.</param>
            <param name="sort">false — сортировать по дате добавления, true — сортировать по количеству общих друзей. (Если out = true, 
            данный параметр не учитывается).</param>
            <param name="suggested">true — возвращать рекомендованных другими пользователями друзей, false — возвращать заявки в друзья 
            (по умолчанию).</param>
            <returns>
            - Если не установлен параметр need_mutual, то в случае успеха возвращает отсортированный в антихронологическом порядке по 
            времени подачи заявки список идентификаторов (id) пользователей (кому или от кого пришла заявка).
            - Если установлен параметр need_mutual, то в случае успеха возвращает отсортированный в антихронологическом порядке по 
            времени подачи заявки массив объектов, содержащих информацию о заявках на добавление в друзья. Каждый из объектов содержит 
            поле uid, являющийся идентификатором пользователя. При наличии общих друзей, в объекте будет содержаться поле mutual, в 
            котором будет находиться список идентификаторов общих друзей.
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/friends.getRequests"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Model.AccountInfo">
            <summary>
            Хранит информацию о текущем аккаунте. Подробнее: <see href="https://vk.com/dev/account.getInfo"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Country">
            <summary>
            Строковой код страны, определенный по IP адресу, с которого сделан запрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.HttpsRequired">
            <summary>
            Пользователь установил в настройках аккаунта "Всегда использовать безопасное соединение"
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Intro">
            <summary>
            Битовая маска, отвечающая за прохождение обучения использованию приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Language">
            <summary>
            Числовой идентификатор текущего языка пользователя.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Album">
            <summary>
            Альбом с фотографиями пользователя.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. Раздел "Альбом с фотографиями".
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.MediaAttachment">
            <summary>
            Приложенный объект, имеющий идентификатор и владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.Id">
            <summary>
            Идентификатор приложенного объекта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.OwnerId">
            <summary>
            Идентификатор владельца приложенного объекта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Thumb">
            <summary>
            Обложка альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Description">
            <summary>
            Описание альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.CreateTime">
            <summary>
            Дата и время создания альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.UpdateTime">
            <summary>
            Дата и время последнего обновления альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Size">
            <summary>
            Количество фотографий в альбоме.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.ApplicationContent">
            <summary>
            Контент приложения.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. Раздел "Контент приложения".
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Id">
            <summary>
            Идентификатор приложения, разместившего запись на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Name">
            <summary>
            Название приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Photo130">
            <summary>
            Адрес изображения для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Photo604">
            <summary>
            Адрес полноразмерного изображения. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Comments">
            <summary>
            Комментарии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Likes">
            <summary>
            Лайки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Reposts">
            <summary>
            Репосты
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Attachments">
            <summary>
            Информация о вложениях записи (фотографии ссылки и т.п.).
            </summary>
        </member>
        <member name="T:VkNet.Model.AudioAlbum">
            <summary>
            Информация об аудиоальбоме.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/audio.getAlbums"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.OwnerId">
            <summary>
            Идентификатор владельца альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.AlbumId">
            <summary>
            Идентификатор альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="T:VkNet.Model.BanInfo">
            <summary>
            Информация о забанненом (добавленном в черный список) пользователе сообщества.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/groups.getBanned"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.BanInfo.AdminId">
            <summary>
            Идентификатор администратора, который добавил пользователя в черный список.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Date">
            <summary>
            Дата добавления пользователя в черный список.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Comment">
            <summary>
            Текст комментария к бану.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.EndDate">
            <summary>
            Дата, когда пользователь будет разбанен.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Reason">
            <summary>
            Причина добавления пользователя в черный список.
            </summary>
        </member>
        <member name="T:VkNet.Model.ChangeNameRequest">
            <summary>
            Информация о заявке на смену имени.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.Id">
            <summary>
            Идентификатор заявки, необходимый для её отмены (только если <see cref="P:VkNet.Model.ChangeNameRequest.Status"/> равен <see cref="F:VkNet.Enums.ChangeNameStatus.Processing"/>)
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.Status">
            <summary>
            Статус заявки
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.RepeatDate">
            <summary>
            Дата, после которой возможна повторная подача заявки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.FirstName">
            <summary>
            Имя пользователя, указанное в заявке
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.LastName">
            <summary>
            Фамилия пользователя, указанная в заявке.
            </summary>
        </member>
        <member name="T:VkNet.Model.City">
            <summary>
            Город.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/database.getCities"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.City.Id">
            <summary>
            Идентификатор города.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Title">
            <summary>
            Название города.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Area">
            <summary>
            Район.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Region">
            <summary>
            Область.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Important">
            <summary>
            Является ли город основным.
            </summary>
        </member>
        <member name="T:VkNet.Model.Comment">
            <summary>
            Комментарий к записи.
            См. описание <see href="http://vk.com/devcomment_object"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Id">
            <summary>
            Идентификатор комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.FromId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Date">
            <summary>
            Дата и время создания комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Text">
            <summary>
            Текст комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.ReplyToUserId">
            <summary>
            Идентификатор пользователя или сообщества, в ответ которому оставлен текущий комментарий (если применимо).
            </summary>     
        </member>
        <member name="P:VkNet.Model.Comment.ReplyToCommentId">
            <summary>
            Идентификатор комментария, в ответ на который оставлен текущий комментарий (если применимо).
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Attachments">
            <summary>
            Объект, содержащий информацию о медиавложениях в комментарии. См. описание формата медиавложений. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Attachment">
            <summary>
            Первое приложение к комментарию.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Likes">
            <summary>
            Информация о числе людей, которым понравился данный комментарий.
            </summary>
        </member>
        <member name="T:VkNet.Model.Connections">
            <summary>
            Информация о социальных контактах пользователя.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_полей_параметра_fields"/> 
            и <see href="http://vk.com/dev/fields"/>. Последняя страница обманывает насчет поля 'connections'. 
            Экспериментально установлено, что поля находятся непосредственно в полях объекта User.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Skype">
            <summary>
            Логин в Skype.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.FacebookId">
            <summary>
            Идентификатор акаунта в Facebook.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.FacebookName">
            <summary>
            Имя и фамилия в facebook.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Twitter">
            <summary>
            Акаунт в twitter.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Instagram">
            <summary>
            Акаунт в Instagram.
            </summary>
        </member>
        <member name="T:VkNet.Model.Contact">
            <summary>
            Контакты группы
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.UserId">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Description">
            <summary>
            Должность.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Email">
            <summary>
            Электронная почта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Phone">
            <summary>
            Телефон.
            </summary>
        </member>
        <member name="T:VkNet.Model.Country">
            <summary>
            Информация о стране.
            </summary>
        </member>
        <member name="P:VkNet.Model.Country.Id">
            <summary>
            Идентификатор страны.
            </summary>
        </member>
        <member name="P:VkNet.Model.Country.Title">
            <summary>
            Название страны.
            </summary>
        </member>
        <member name="T:VkNet.Model.ExternalLink">
            <summary>
            Ссылки в группе
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Id">
            <summary>
            Идентификатор ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Url">
            <summary>
            Адрес ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Name">
            <summary>
            Название страницы, на которую ведет ссылка.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Photo50">
            <summary>
            Фото 50px.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Photo100">
            <summary>
            Фото 100px.
            </summary>
        </member>
        <member name="T:VkNet.Model.Faculty">
            <summary>
            Факультет
            </summary>
        </member>
        <member name="P:VkNet.Model.Faculty.Id">
            <summary>
            Идентификатор факультета
            </summary>
        </member>
        <member name="P:VkNet.Model.Faculty.Title">
            <summary>
            Название факультета
            </summary>
        </member>
        <member name="T:VkNet.Model.FriendList">
            <summary>
            Метка в списке друзей
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendList.Id">
            <summary>
            Идентификатор метки
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendList.Name">
            <summary>
            Название метки
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Graffiti">
            <summary>
            Граффити.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. Раздел "Граффити".
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Photo200">
            <summary>
            Адрес изображения для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Photo586">
            <summary>
            Адрес полноразмерного изображения. 
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Link">
            <summary>
            Ссылка на Web-страницу.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. Раздел "Ссылка".
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Url">
            <summary>
            Адрес ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Title">
            <summary>
            Заголовок ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Description">
            <summary>
            Описание ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Image">
            <summary>
            Адрес превью изображения к ссылке (если имеется).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.PreviewPage">
            <summary>
            Идентификатр wiki страницы с контентом для предпросмотра содержимого страницы. Идентификатор возвращается в формате "owner_id_page_id". 
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Poll">
            <summary>
            Опрос.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. Раздел "Опрос".
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Question">
            <summary>
            Вопрос, заданный в голосовании.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Created">
            <summary>
            Дата создания опроса
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Votes">
            <summary>
            Кол-во ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.AnswerId">
            <summary>
            Идентификатор выбранного ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.IsAnonymous">
            <summary>
            Возможность анонимых ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Answers">
            <summary>
            Варианты ответов
            </summary>
        </member>
        <member name="T:VkNet.Model.PhotoAlbum">
            <summary>
            Альбом для фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Id">
            <summary>
            идентификатор созданного альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.ThumbId">
            <summary>
            идентификатор фотографии, которая является обложкой альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.OwnerId">
            <summary>
            идентификатор пользователя или сообщества, которому принадлежит альбом
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Title">
            <summary>
            название альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Description">
            <summary>
            описание альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Created">
            <summary>
            дата создания альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Updated">
            <summary>
            дата обновления альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Size">
            <summary>
            количество фотографий в альбоме
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Privacy">
            <summary>
            настройки приватности для просмотра альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.CommentPrivacy">
            <summary>
            настройки приватности для комментирования альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.CanUpload">
            <summary>
            может ли текущий пользователь добавлять фотографии в альбом
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.PrivacyView">
            <summary>
            настройки приватности для альбома в формате настроек приватности; (не приходит для системных альбомов) 
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.ThumbSrc">
            <summary>
            Адрес на изображение с предпросмотром
            </summary>
        </member>
        <member name="T:VkNet.Model.PollAnswer">
            <summary>
            Вариант ответа в опросе
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Id">
            <summary>
            Идентификатор варианта ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Text">
            <summary>
            Текст ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Votes">
            <summary>
            Кол-во проголосовавших
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Rate">
            <summary>
            Процент текущего ответа ко всем остальным вариантам
            </summary>
        </member>
        <member name="T:VkNet.Model.PostSource">
            <summary>
            Информация информацию о том, каким образом (через интерфейс сайта, виджет и т.п.) была создана запись на стене. 
            Используя данные из этого поля, разработчик может вывести уточняющую информацию о том, как была создана запись на стене 
            в своем приложении. 
            См. описание <see href="http://vk.com/dev/post_source"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Type">
            <summary>
            На данный момент поддерживаются следующие типы источников записи на стене, значение которых указываются в поле type: 
            - vk - запись создана через основной интерфейс сайта (http://vk.com/); 
            - widget - запись создана через виджет на стороннем сайте; 
            - api - запись создана приложением через API; 
            - rss - запись создана посредством импорта RSS-ленты со стороннего сайта; 
            - sms - запись создана посредством отправки SMS-сообщения на специальный номер. 
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Data">
            <summary>
            Поле data является опциональным и содержит следующие данные в зависимости от значения поля type: 
            - vk - содержит тип действия, из-за которого была создана запись: 
                - profile_activity - изменение статуса под именем пользователя; 
                - profile_photo - изменение профильной фотографии пользователя; 
            - widget - содержит тип виджета, через который была создана запись: 
                - comments - виджет комментариев; 
                - like - виджет «Мне нравится»; 
                - poll - виджет опросов; 
            </summary>
        </member>
        <member name="T:VkNet.Model.Previews">
            <summary>
            Набор Url к картинкам с различным разрешениям.
            Используется в <see cref="T:VkNet.Model.User"/>, <see cref="T:VkNet.Model.Group"/> и <see cref="T:VkNet.Model.Message"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo50">
            <summary>
            Url квадратной фотографии, имеющей ширину 50 пикселей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo100">
            <summary>
            Url квадратной фотографии, имеющей ширину 100 пикселей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo200">
            <summary>
            Url квадратной фотографии, имеющей ширину 200 пикселей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo400">
            <summary>
            Url квадратной фотографии, имеющей ширину 400 пикселей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.PhotoMax">
            <summary>
            Url квадратной фотографии, имеющей максимальную ширину.
            </summary>
        </member>
        <member name="T:VkNet.Model.Region">
            <summary>
            Регион
            </summary>
        </member>
        <member name="P:VkNet.Model.Region.Id">
            <summary>
            Идентификатор региона
            </summary>
        </member>
        <member name="P:VkNet.Model.Region.Title">
            <summary>
            Название региона
            </summary>
        </member>
        <member name="T:VkNet.Model.Relative">
            <summary>
            Информация о родственнике.
            См. описание <see href="http://vk.com/dev/fields"/>. Раздел relatives.
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Id">
            <summary>
            Идентификатор родственника.
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Type">
            <summary>
            Тип родственника (sibling и т.п.)
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Name">
            <summary>
            Имя родственника, если он не является пользователем ВКонтакте.
            </summary>
        </member>
        <member name="T:VkNet.Model.RepostResult">
            <summary>
            Результат копирования записи на стену и информация о ней.
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.Success">
            <summary>
            Результат копирования
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.PostId">
            <summary>
            Идентификатор созданной записи
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.RepostsCount">
            <summary>
            Число копирований исходной записи с учетом осуществленного
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.LikesCount">
            <summary>
            Число отметок "Мне нравится" у исходной записи
            </summary>
        </member>
        <member name="T:VkNet.Model.School">
            <summary>
            Школа, в которой учился пользователь.
            См. описание <see href="http://vk.com/dev/fields"/>. Раздел schools.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Id">
            <summary>
            Идентификатор школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Country">
            <summary>
            Идентификатор страны, в которой расположена школа.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.City">
            <summary>
            Идентификатор города, в котором расположена школа.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Name">
            <summary>
            Наименование школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearFrom">
            <summary>
            Год начала обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearTo">
            <summary>
            Год окончания обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearGraduated">
            <summary>
            Год выпуска.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Class">
            <summary>
            Буква класса.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Speciality">
            <summary>
            Специализация класса.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Type">
            <summary>
            Идентификатор типа школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.TypeStr">
            <summary>
            Название типа школы.
            </summary>
        </member>
        <member name="T:VkNet.Model.StandInLife">
            <summary>
            Жизненная позиция (Personal).
            Данная информация не документирована в официальном API ВКонтакте и восстановлена по ответам.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Political">
            <summary>
            Политические предпочтения пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Languages">
            <summary>
            Языки, на которых говорит пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Religion">
            <summary>
            Мировоззрение пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.InspiredBy">
            <summary>
            Источники вдохновения пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.PeopleMain">
            <summary>
            Главное в людях для пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.LifeMain">
            <summary>
            Главное в жизни для пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Smoking">
            <summary>
            Отношение к курению.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Alcohol">
            <summary>
            Отношение к алкоголю.
            </summary>
        </member>
        <member name="T:VkNet.Model.Street">
            <summary>
            Улица
            </summary>
        </member>
        <member name="P:VkNet.Model.Street.Id">
            <summary>
            Идентификатор улицы
            </summary>
        </member>
        <member name="P:VkNet.Model.Street.Title">
            <summary>
            Название улицы
            </summary>
        </member>
        <member name="T:VkNet.Model.Tag">
            <summary>
            Отметка к видеозаписи.
            См. описание <see href="http://vk.com/dev/tag.getTags"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Id">
            <summary>
            Идентификатор отметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Name">
            <summary>
            Название отметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.UserId">
            <summary>
            Идентификатор пользователя, которому соответствует отметка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.PlacerId">
            <summary>
            Идентификатор пользователя, сделавшего отметку.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Date">
            <summary>
            Дата добавления отметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.IsViewed">
            <summary>
            Статус отметки: true - подтвержденная, false - не подтвержденная.
            </summary>
        </member>
        <member name="T:VkNet.Model.University">
            <summary>
            Высшее учебное заведение, в котором учился пользователь.
            См. описание <see href="http://vk.com/dev/fields"/>. Раздел universities.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Id">
            <summary>
            Идентификатор университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Country">
            <summary>
            Идентификатор страны, в которой расположен университет.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.City">
            <summary>
            Идентификатор города, в котором расположен университет.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Name">
            <summary>
            Наименование университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Faculty">
            <summary>
            Идентификатор факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.FacultyName">
            <summary>
            Название факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Chair">
            <summary>
            Идентификатор кафедры.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.ChairName">
            <summary>
            Наименование кафедры.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Graduation">
            <summary>
            Год окончания обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.EducationForm">
            <summary>
            Форма обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.EducationStatus">
            <summary>
            Статус пользователя в университете.
            </summary>
        </member>
        <member name="T:VkNet.Model.UploadServerInfo">
            <summary>
            Адрес сервера для загрузки фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.UploadUrl">
            <summary>
            Адрес для загрузки фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.AlbumId">
            <summary>
            Идентификатор альбома, в который будет загружена фотография
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.UserId">
            <summary>
            Идентификатор пользователя, от чьего имени будет загружено фото
            </summary>
        </member>
        <member name="T:VkNet.Model.VideoAlbum">
            <summary>
            Видеоальбом.
            </summary>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/video.getAlbums"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Id">
            <summary>
            Идентификатор альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.OwnerId">
            <summary>
            Идентификатор владельца альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Count">
            <summary>
            Количество видеозаписей в альбоме.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Photo160">
            <summary>
            URL изображения предпросмотра альбома шириной в 160 пикселов.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Photo320">
            <summary>
            URL изображения предпросмотра альбома шириной в 320 пикселов.
            </summary>
        </member>
        <member name="T:VkNet.Model.VkObject">
            <summary>
            Определяет тип объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.VkObject.Id">
            <summary>
            Идентификатор объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.VkObject.Type">
            <summary>
            Тип объекта
            </summary>
        </member>
        <member name="T:VkNet.Utils.ApiMethodNameAttribute">
            <summary>
            Задает название метода на сервере ВК (используется генератором юнит-тестов)
            </summary>
        </member>
        <member name="M:VkNet.Utils.ApiMethodNameAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="name">Название метода</param>
        </member>
        <member name="P:VkNet.Utils.ApiMethodNameAttribute.Name">
            <summary>
            Название метода
            </summary>
        </member>
        <member name="P:VkNet.Utils.ApiMethodNameAttribute.Order">
            <summary>
            Порядок вызова метода
            </summary>
            <remarks>
            Методы с большим числом вызываются раньше
            </remarks>
        </member>
        <member name="P:VkNet.Utils.ApiMethodNameAttribute.Skip">
            <summary>
            Пропускает генерацию юнит теста для этого метода
            </summary>
        </member>
        <member name="T:VkNet.Utils.ApiVersionAttribute">
            <summary>
            Версия VK API, для которой реализован метод.
            </summary>
        </member>
        <member name="M:VkNet.Utils.ApiVersionAttribute.#ctor(System.String)">
            <summary>
            Создает экземпляр атрибута <see cref="T:VkNet.Utils.ApiVersionAttribute"/> с заданой версией API
            </summary>
            <param name="version">Версия API</param>
        </member>
        <member name="P:VkNet.Utils.ApiVersionAttribute.Version">
            <summary>
            Версия VK API
            </summary>
        </member>
        <member name="T:VkNet.Utils.DefaultValueAttribute">
            <summary>
            Значение enum, используемое по умолчанию.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC action.
            If applied to a method, the MVC action name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC araa.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC controller.
            If applied to a method, the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)"/> 
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(String, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(String, Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC partial view.
            If applied to a method, the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC view.
            If applied to a method, the MVC view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
            <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl)
            {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.WebPages.WebPageBase.RenderSection(String)"/>
            </summary>
        </member>
        <member name="T:VkNet.Utils.VkValueAttribute">
            <summary>
            Указывает параметры метода на сервере ВК
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkValueAttribute.#ctor(System.String,System.Object)">
            <summary>
            Конструктор
            </summary>
            <param name="name">Название параметра</param>
            <param name="value">Значение параметра</param>
        </member>
        <member name="P:VkNet.Utils.VkValueAttribute.Name">
            <summary>
            Название параметра
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkValueAttribute.Value">
            <summary>
            Значение параметра
            </summary>
        </member>
        <member name="T:VkNet.Model.Coordinates">
            <summary>
            Координаты места, в котором была сделана запись.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo"/>.
            Официальная страница <see href="http://vk.com/dev/post"/>, описывающая запись на стене и объект Geo в нем, почему то 
            молчит о том, что возвращаются географические координаты.
            </summary>
        </member>
        <member name="P:VkNet.Model.Coordinates.Latitude">
            <summary>
            Географическая широта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Coordinates.Longitude">
            <summary>
            Географическая долгота.
            </summary>
        </member>
        <member name="T:VkNet.Utils.VkParameters">
            <summary>
            Параметры запроса к ВКонтакте.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkParameters.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Utils.VkParameters"/>.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Utils.VkParameters"/> на основе словаря.
            </summary>
            <param name="parameters">
            Параметры запроса.
            </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,``0)">
            <summary>
            Добавляет параметр запроса.
            </summary>
            <typeparam name="T">Тип значения параметра запроса.</typeparam>
            <param name="name">Имя параметра запроса.</param>
            <param name="value">Значение параметра запроса.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавляет параметр запроса, представляющий собой последовательность элементов заданного типа.
            Последовательность добавляется в виде строкового значения, содержащего ее элементы, разделенные запятой.
            </summary>
            <typeparam name="T">Имя типа элементов последовательности.</typeparam>
            <param name="name">Имя параметра запроса.</param>
            <param name="collection">Последовательность, представляющая значение параметра запроса.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Добавляет именованный параметр запроса, представляющий собой коллекцию элементов заданного типа.
            Коллекция добавляетсяв виде строкового значения, содержащего ее элементы, разделенные запятой.
            </summary>
            <typeparam name="T">Имя типа элементов коллекции.</typeparam>
            <param name="name">Имя параметра запроса.</param>
            <param name="collection">Коллекция, представляющая значение параметра запроса.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Nullable{``0})">
            <summary>
            Добавляет параметр запроса. 
            Если передан null, то добавление параметра не производится.
            </summary>
            <typeparam name="T">Тип значения параметра запроса.</typeparam>
            <param name="name">Имя параметра запроса.</param>
            <param name="nullableValue">Значение параметра запроса.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            Добавляет параметр-дату. 
            Если передан null, то добавление не производится.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="nullableDateTime">Значение параметра.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Добавляет логический параметр. 
            Если передан null или значение параметра false, то добавление не производится.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="nullableValue">Значение параметра.</param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Boolean)">
            <summary>
            Добавляет логический параметр. 
            Если передан null, то добавление не производится.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="P:VkNet.Utils.VkParameters.Empty">
            <summary>
            Параметры для запроса без параметров.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Attachment">
            <summary>
            Информация о медиавложении в записи.
            См. описание <see href="http://vk.com/dev/attachments_w"/>. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Photo">
            <summary>
            Фотография из альбома или фотография, загруженная напрямую с компьютера пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Video">
            <summary>
            Видеозапись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Audio">
            <summary>
            Аудиозапись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Document">
            <summary>
            Документ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Graffiti">
            <summary>
            Документ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Link">
            <summary>
            Ссылка на Web-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Note">
            <summary>
            Заметка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.ApplicationContent">
            <summary>
            Контент приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Poll">
            <summary>
            Опрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Page">
            <summary>
            Wiki страница.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Album">
            <summary>
            Альбом с фотографиями.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Instance">
            <summary>
            Экземпляр самого прикрепления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Type">
            <summary>
            Информация о типе вложения.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Audio">
            <summary>
            Аудиозапись пользователя или группы.
            См. описание <see href="http://vk.com/dev/audio_object"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Artist">
            <summary>
            Исполнитель аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Title">
            <summary>
            Название композиции.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Duration">
            <summary>
            Длительность аудиозаписи в секундах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Url">
            <summary>
            Ссылка на аудиозапись (привязана к ip-адресу клиентского приложения).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.LyricsId">
            <summary>
            Идентификатор текста аудиозаписи (если доступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.AlbumId">
            <summary>
            Идентификатор альбома аудиозаписи (если присвоен).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Genre">
            <summary>
            Жанр аудиозаписи.
            </summary>
        </member>
        <member name="T:VkNet.Model.Chat">
            <summary>
            Информация о беседе (мультидиалоге, чате).
            См. описание <see href="http://vk.com/dev/chat_object"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Id">
            <summary>
            Идентификатор беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Type">
            <summary>
            Тип диалога.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Title">
            <summary>
            Название беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.AdminId">
            <summary>
            Идентификатор пользователя, который является создателем беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Users">
            <summary>
            Список идентификаторов участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Left">
            <summary>
            Состоит ли аккаунт в беседе или покинул ее
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Sound">
            <summary>
            Неизвестно что за поле, но оно есть в некоторых диалогах (Вроде не влияет на звоковое уведомление о новых сообщениях)
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.DisabledUntil">
            <summary>
            Неизвестно что за поле, но оно есть в некоторых диалогах (При отключенных звуковых уведомлениях равняеться -1)
            </summary>
        </member>
        <member name="T:VkNet.Model.Comments">
            <summary>
            Информация о количестве комментариев к записи.
            См. описание <see href="http://vk.com/dev/post"/>. Раздел comments.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.Count">
            <summary>
            Количество комментариев к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.CanPost">
            <summary>
            Признак может ли текущий пользователь добавить комментарий к записи.
            </summary>
        </member>
        <member name="T:VkNet.Model.Counters">
            <summary>
            Количество различных объектов у пользователя. 
            См. описание <see href="http://vk.com/dev/fields"/> и <see href="http://vk.com/pages?oid=-1&amp;p=Описание_полей_параметра_fields"/> и 
            <see href="http://vk.com/dev/fields_groups"/>. 
            Раздел counters.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Albums">
            <summary>
            Количество фотоальбомов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Videos">
            <summary>
            Количество видеозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Audios">
            <summary>
            Количество аудиозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Photos">
            <summary>
            Количество фотографий.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Notes">
            <summary>
            Количество заметок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Friends">
            <summary>
            Количество друзей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Groups">
            <summary>
            Количество сообществ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.OnlineFriends">
            <summary>
            Количество друзей онлайн.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.MutualFriends">
            <summary>
            Количество общих друзей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.UserVideos">
            <summary>
            Количество видеозаписей с пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Followers">
            <summary>
            Количество подписчиков.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.UserPhotos">
            <summary>
            Количество фотографий с пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Subscriptions">
            <summary>
            Количество подписок (только пользователи).
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.TopicsCount">
            <summary>
            Количество тем обсуждений сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.DocumentsCount">
            <summary>
            Количество документов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Pages">
            <summary>
            Количество публичных страниц, на которые подписан пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Messages">
            <summary>
            Количество сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Gifts">
            <summary>
            Количество подарков
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Events">
            <summary>
            Количество событий
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Notifications">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Document">
            <summary>
            Информация о документе.
            См. описание <see href="http://vk.com/dev/doc"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Title">
            <summary>
            Название документа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Size">
            <summary>
            Размер документа в байтах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Ext">
            <summary>
            Расширение документа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Url">
            <summary>
            Адрес документа, по которому его можно загрузить.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Photo100">
            <summary>
            Адрес изображения с размером 100x75px (если файл графический).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Photo130">
            <summary>
            Адрес изображения с размером 130x100px (если файл графический).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.AccessKey">
            <summary>
            Ключ доступа к закрытым ресурсам
            </summary>
        </member>
        <member name="T:VkNet.Model.Geo">
            <summary>
            Информация о географическом месте, в котором была сделана запись. 
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Type">
            <summary>
            Имя типа информации о географическом месте (в настоящий момент поддерживается единственный тип "place", это означает, 
            что запись привязана к определенному географическому месту в базе мест.)
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Coordinates">
            <summary>
            Координаты места, в котором была сделана запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Place">
            <summary>
            Информация о месте, в котором была сделана запись.
            </summary>
        </member>
        <member name="T:VkNet.Model.Group">
            <summary>
            Информация о сообществе (группе).
            См. описание <see href="http://vk.com/dev/fields_groups"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Id">
            <summary>
            Идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Name">
            <summary>
            Название сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.ScreenName">
            <summary>
            Короткий адрес страницы сообщества, например, apiclub. Если он не назначен, то 'club'+gid, например, club35828305.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsClosed">
            <summary>
            Публичность группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsAdmin">
            <summary>
            Признак яляется ли текущий пользователь руководителем сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.AdminLevel">
            <summary>
            Уровень административных полномочий текущего пользователя в сообществе (действительно, если IsAdmin = true).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsMember">
            <summary>
            Признак является ли текущий пользователь участником сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Type">
            <summary>
            Тип сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CityId">
            <summary>
            Идентификатор города, указанного в информации о сообществе. Возвращается идентификатор города, который можно использовать для 
            получения его названия с помощью метода <see cref="M:VkNet.Categories.DatabaseCategory.GetCitiesById(System.Int32[])"/>. Если город не указан, возвращается 0. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CountryId">
            <summary>
            Идентификатор страны, указанной в информации о сообществе. Возвращается идентификатор страны, который можно использовать для 
            получения ее названия с помощью метода <see cref="M:VkNet.Categories.DatabaseCategory.GetCountriesById(System.Int32[])"/>. Если страна не указана, возвращается 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Place">
            <summary>
            Место, указанное в информации о сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Description">
            <summary>
            Текст описания сообщества. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.WikiPage">
            <summary>
            Название главной вики-страницы сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.MembersCount">
            <summary>
            Количество участников сообщества. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Counters">
            <summary>
            Счетчики сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.StartDate">
            <summary>
            Время начала встречи (возвращаются только для встреч).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.EndDate">
            <summary>
            Время окончания встречи (возвращаются только для встреч).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanPost">
            <summary>
            Информация о том, может ли текущий пользователь оставлять записи на стене сообщества (true - может, false - не может).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanSeelAllPosts">
            <summary>
            Информация о том, разрешено видеть чужие записи на стене группы (true - разрешено, false - не разрешено).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanUploadDocuments">
            <summary>
            Информация о том, может ли текущий пользователь загружать документы в группу (true, если пользователь может 
            загружать документы, false – если не может).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanCreateTopic">
            <summary>
            Информация о том, может ли текущий пользователь создать тему обсуждения в группе. 
            (true, если пользователь может создать обсуждение, false – если не может). 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Activity">
            <summary>
            Строка состояния публичной страницы. У групп возвращается строковое значение, открыта ли группа или нет, 
            а у событий дата начала. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Status">
            <summary>
            Статус сообщества. Возвращается строка, содержащая текст статуса, расположенного на странице сообщества под его названием. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Contacts">
            <summary>
            Информация из блока контактов публичной страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Links">
            <summary>
            Информация из блока ссылок сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.FixedPostId">
            <summary>
            Идентификатор закрепленного поста сообщества. Сам пост можно получить, используя <see cref="M:VkNet.Categories.WallCategory.GetById(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,System.Int64}})"/>,
            передав идентификатор в виде – {group_id}_{post_id}.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsVerified">
            <summary>
            Возвращает информацию о том, является ли сообщество верифицированным.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Site">
            <summary>
            Адрес сайта из поля «веб-сайт» в описании сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.InvitedBy">
            <summary>
            Идентификатор пользователя пригласившего в группу
            </summary>
        </member>
        <member name="T:VkNet.Model.LastActivity">
            <summary>
            Информация о последней активности пользователя.
            См. описание <see href="http://vk.com/dev/messages.getLastActivity"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.UserId">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.IsOnline">
            <summary>
            Текущий статус пользователя (true - в сети, false - не в сети).
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.Time">
            <summary>
            Дата последней активности пользователя.
            </summary>
        </member>
        <member name="T:VkNet.Model.Likes">
            <summary>
            Информация о лайках к записи.
            См. описание <see href="http://vk.com/dev/post"/>. Раздел likes.
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.Count">
            <summary>
            Число пользователей, которым понравилась запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.UserLikes">
            <summary>
            Признак понравилась ли запись текущему пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.CanLike">
            <summary>
            Признак может ли текущий пользователь поставить отметку "Мне нравится".
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.CanPublish">
            <summary>
            Признак может ли текущий пользователь сделать репост записи (опубликовать у себя запись).
            </summary>
        </member>
        <member name="T:VkNet.Model.LongPollServerResponse">
            <summary>
            Объект, с помощью которого можно подключиться к серверу быстрых сообщений для мгновенного 
            получения приходящих сообщений и других событий.  
            См. описание <see href="http://vk.com/dev/messages.getLongPollServer"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Key">
            <summary>
            Ключ для подключения.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Server">
            <summary>
            Имя сервера быстрых сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Ts">
            <summary>
            Отметка времени.
            </summary>
        </member>
        <member name="T:VkNet.Model.Lyrics">
            <summary>
            Текст аудиозаписи.
            См. описание <see href="http://vk.com/dev/audio.getLyrics"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Lyrics.Id">
            <summary>
            Идентификатор текста аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Lyrics.Text">
            <summary>
            Тест аудиозаписи. В качестве переводов строк в тексте используется '\n'. 
            </summary>
        </member>
        <member name="T:VkNet.Model.Message">
            <summary>
            Личное сообщение пользователя.
            См. описание <see href="http://vk.com/dev/message"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Id">
            <summary>
            Идентификатор сообщения (не возвращается для пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.UserId">
            <summary>
            Идентификатор автора сообщения (для исходящего сообщения — идентификатор получателя).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Date">
            <summary>
            Дата отправки сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ReadState">
            <summary>
            Статус сообщения (не возвращается для пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Type">
            <summary>
            Тип сообщения (не возвращается для пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Unread">
            <summary>
            Содержит количество непрочитанных сообщений в текущем диалоге (если это значение было возвращено, иначе 0)
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Title">
            <summary>
            Заголовок сообщения или беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Body">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Attachments">
            <summary>
            Массив медиа-вложений (прикреплений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ForwardedMessages">
            <summary>
            Массив пересланных сообщений (если есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ContainsEmojiSmiles">
            <summary>
            Содержатся ли в сообщении emoji-смайлы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.IsImportant">
            <summary>
            Является ли сообщение важным.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.IsDeleted">
            <summary>
            Удалено ли сообщение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ChatId">
            <summary>
            Идентификатор беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ChatActiveIds">
            <summary>
            Идентификаторы участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.UsersCount">
            <summary>
            Количество участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.AdminId">
            <summary>
            Идентификатор создателя беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий беседы.
            </summary>
        </member>
        <member name="T:VkNet.Model.SearchDialogsResponse">
            <summary>
            Ответ при поиске диалогов по строке поиска.
            См. описание <see href="http://vk.com/dev/messages.searchDialogs"/>.
            </summary>
        </member>
        <member name="M:VkNet.Model.SearchDialogsResponse.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Model.SearchDialogsResponse"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchDialogsResponse.Users">
            <summary>
            Список найденных пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchDialogsResponse.Chats">
            <summary>
            Список найденных бесед.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Note">
            <summary>
            Заметка пользователя.
            См. описание <see href="http://vk.com/dev/note"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Title">
            <summary>
            Заголовок заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Text">
            <summary>
            Текст заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Date">
            <summary>
            Дата создания заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.CommentsCount">
            <summary>
            Количество комментариев к заметке.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.ReadCommentsCount">
            <summary>
            Количество прочитанных комментариев (только при запросе информации о заметке текущего пользователя).
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Page">
            <summary>
            Информация о вики-странице сообщества. 
            См. описание <see href="http://vk.com/dev/pages.get"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.GroupId">
            <summary>
            Идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CreatorId">
            <summary>
            Идентификатор создателя страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Title">
            <summary>
            Название страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Source">
            <summary>
            Текст страницы в вики-формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CurrentUserCanEdit">
            <summary>
            Указывает, может ли текущий пользователь редактировать текст страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CurrentUserCanEditAccess">
            <summary>
            Указывает, может ли текущий пользователь изменять права доступа на страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.WhoCanView">
            <summary>
            Указывает, кто может просматривать вики-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.WhoCanEdit">
            <summary>
            Указывает, кто может редактировать вики-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.EditorId">
            <summary>
            Идентификатор пользователя, который редактировал страницу последним.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Edited">
            <summary>
            Дата последнего изменения (в виде строки).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CreateTime">
            <summary>
            Дата создания страницы (в виде строки).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Parent">
            <summary>
            Заголовок родительской страницы для навигации, если есть.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Parent2">
            <summary>
            Заголовок второй родительской страницы для навигации, если есть.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Html">
            <summary>
            Html-текст страницы.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Photo">
            <summary>
            Фотография.
            </summary>
            <remarks>
            См. описание <see href="http://vk.com/dev/photo"/> и <see href="http://vk.com/dev/attachments_w"/> раздел "Альбом с фотографиями".
            </remarks>
        </member>
        <member name="F:VkNet.Model.Attachments.Photo.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах
            </summary>
        </member>
        <member name="F:VkNet.Model.Attachments.Photo.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.AlbumId">
            <summary>
            Идентификатор альбома, в котором находится фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo75">
            <summary>
            Url фотографии с максимальным размером 75x75px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo130">
            <summary>
            Url фотографии с максимальным размером 130x130px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo604">
            <summary>
            Url фотографии с максимальным размером 604x604px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo807">
            <summary>
            Url фотографии с максимальным размером 807x807px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo1280">
            <summary>
            Url фотографии с максимальным размером 1280x1024px. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo2560">
            <summary>
            Url фотографии с максимальным размером  2560x2048px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Width">
            <summary>
            Ширина оригинала фотографии в пикселах
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Height">
            <summary>
            Высота оригинала фотографии в пикселах. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Text">
            <summary>
            Текст описания фотографии. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.CreateTime">
            <summary>
            Дата добавления фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.AccessKey">
            <summary>
            Ключ доступа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.UserId">
            <summary>
            Идентификатор пользователя, загрузившего фото (если фотография размещена в сообществе). Для фотографий, размещенных от имени сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PostId">
            <summary>
            Идентификатор записи, у которой данная фотография является прикреплением???
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PlacerId">
            <summary>
            идентификатор пользователя, сделавшего отметку
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.TagCreated">
            <summary>
            дата создания отметки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.TagId">
            <summary>
            идентификатор отметки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Likes">
            <summary>
            Лайки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.CanComment">
            <summary>
            Возможность комментирования фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Comments">
            <summary>
            Комментарии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Tags">
            <summary>
            Теги
            </summary>
        </member>
        <member name="T:VkNet.Model.Place">
            <summary>
            Информация о месте, в котором была сделана запись.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo"/> и <see href="http://vk.com/dev/fields_groups"/>. Раздел place.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Id">
            <summary>
            Идентификатор места.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Title">
            <summary>
            Название места.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Latitude">
            <summary>
            Географическая широта, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Longitude">
            <summary>
            Географическая долгота, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.TypeId">
            <summary>
            Идентификатор типа места, информацию о котором можно получить с помощью метода <see cref="!:DatabaseCategory.GetPlaceTypes"/> (пока не реализовано).
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.CountryId">
            <summary>
            Идентификатор страны, название которой можно получить с помощью метода <see cref="M:VkNet.Categories.DatabaseCategory.GetCountriesById(System.Int32[])"/>. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.CityId">
            <summary>
            Идентификатор города, название которого можно получить с помощью метода <see cref="M:VkNet.Categories.DatabaseCategory.GetCitiesById(System.Int32[])"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Address">
            <summary>
            Строка с указанием адреса места в городе. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.ShowMap">
            <summary>
            Данный параметр указывается, если местоположение является прикреплённой картой. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Country">
            <summary>
            Страна, в которой находится место.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.City">
            <summary>
            Город, в котором находится место.
            </summary>
        </member>
        <member name="T:VkNet.Model.Reposts">
            <summary>
            Информация о репостах записи. 
            См. описание <see href="http://vk.com/dev/post"/>. Раздел reposts.
            </summary>
        </member>
        <member name="P:VkNet.Model.Reposts.Count">
            <summary>
            Число пользователей, скопировавших запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Reposts.UserReposted">
            <summary>
            Наличие репоста от текущего пользователя .
            </summary>
        </member>
        <member name="T:VkNet.Model.User">
            <summary>
            Информация о пользователя.
            См. описание <see href="http://vk.com/dev/fields"/> и <see href="http://vk.com/pages?oid=-1&amp;p=users.get"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Id">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstName">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastName">
            <summary>
            Фамилия пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Sex">
            <summary>
            Пол пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BirthDate">
            <summary>
            Дата рождения пользователя. Возвращается в формате DD.MM.YYYY или DD.MM (если год рождения скрыт).
            Если дата рождения скрыта целиком, поле отсутствует в ответе.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.City">
            <summary>
            Идентификатор города, указанного на странице пользователя в разделе «Контакты».
            Если город не указан, или основная информация страницы скрыта настройками приватности, то 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Country">
            <summary>
            Идентификатор страны, указанной на странице пользователя в разделе «Контакты». 
            Если страна не указана или основная информация страницы скрыта настройками приватности, то 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Online">
            <summary>
            Признак находится ли пользователь сейчас на сайте.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FriendLists">
            <summary>
            Идентификаторы списков друзей, в которых состоит пользователь. Поле доступно только для метода 
            <see cref="M:VkNet.Categories.FriendsCategory.Get(System.Int64,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.SafetyEnums.FriendsOrder,VkNet.Enums.SafetyEnums.NameCase,System.Nullable{System.Int32})"/>. Получить информацию об идентификаторах и названиях списков друзей можно с 
            помощью метода <see cref="M:VkNet.Categories.FriendsCategory.GetLists"/>. Если пользователь не состоит ни в одном списке друзей, данное 
            поле принимает значение null.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Domain">
            <summary>
            Короткий адрес страницы пользователя. Возвращается строка, содержащая короткий адрес страницы (возвращается только 
            сам поддомен, например, andrew). Если он не назначен, то "id"+uid, например, id35828305.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HasMobile">
            <summary>
            Информация о том, известен ли номер мобильного телефона пользователя (true - известен, false - не известен).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.MobilePhone">
            <summary>
            Номер мобильного телефона (если нет записи или скрыт, то null).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HomePhone">
            <summary>
            Номер домашнего телефона (если нет записи или скрыт, то null).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Connections">
            <summary>
            Данные о подключенных сервисах пользователя, таких как: skype, facebook, twitter, instagram.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Site">
            <summary>
            Возвращает указанный в профиле сайт пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Education">
            <summary>
            Сведения об образовании пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Universities">
            <summary>
            Список высших учебных заведений, в которых учился пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Schools">
            <summary>
            Школы, в которых учился пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanPost">
            <summary>
            Признак разрешено ли оставлять записи на стене у пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanSeeAllPosts">
            <summary>
            Признак разрешено ли видеть чужие записи на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanSeeAudio">
            <summary>
            Признак разрешено ли видеть чужие аудиозаписи на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanWritePrivateMessage">
            <summary>
            Признак разрешено ли написание личных сообщений данному пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Status">
            <summary>
            Строка со статусом пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastSeen">
            <summary>
            Время последнего посещения сайта.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CommonCount">
            <summary>
            Общее количество друзей с текущим пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Relation">
            <summary>
            Семейное положение.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Relatives">
            <summary>
            Родственники пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Counters">
            <summary>
            Различные счетчики пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BanInfo">
            <summary>
            Информация о блокировке пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsDeactivated">
            <summary>
            Является ли пользователь заблокированным
            </summary>
        </member>
        <member name="P:VkNet.Model.User.DeactiveReason">
            <summary>
            Причина блокирования аккаунта
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Nickname">
            <summary>
            Прозвище (ник) пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Timezone">
            <summary>
            Часовой пояс пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Language">
            <summary>
            Идентификатор языка, установленный в настройках.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.OnlineMobile">
            <summary>
            Признак использует ли пользователь мобильное приложение либо мобильную версию сайта.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.OnlineApp">
            <summary>
            Если пользователь зашёл через приложение, то Id приложения иначе null.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.RelationPartner">
            <summary>
            Партнер в семейных отношениях.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.StandInLife">
            <summary>
            Жизненные интересы.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Interests">
            <summary>
            Интересы пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Music">
            <summary>
            Любимая музыка пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Activities">
            <summary>
            Чем занимается пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Movies">
            <summary>
            Любимые фильмы пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Tv">
            <summary>
            Любимые телешоу пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Books">
            <summary>
            Любимые книги пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Games">
            <summary>
            Любимые игры пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.About">
            <summary>
            Информация пользователя о себе.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Quotes">
            <summary>
            Избранные пользователем цитаты.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.InvitedBy">
            <summary>
            Идентификатор пользователя, пригласившего пользователя в беседу (для GetChatUsers).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.MaidenName">
            <summary>
            Девичья фамилия (только для женского пола)
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BirthdayVisibility">
            <summary>
            Видимость даты рождения.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HomeTown">
            <summary>
            Родной город пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.ChangeNameRequest">
            <summary>
            Информация о заявке на смену имени.
            </summary>
        </member>
        <member name="T:VkNet.Exception.VkApiAuthorizationException">
            <summary>
            Исключение, которое выбрасывается при попытке неудачной авторизации, когда указан неправильный логин или пароль 
            при вызове метода <see cref="!:VkApi.Authorize(int,string,string,Settings,long?,string)"/>.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiAuthorizationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.VkApiAuthorizationException"/>.
            </summary>
            <param name="message">Описание исключения.</param>
            <param name="email">Логин, который был указан при попытке авторизации.</param>
            <param name="password">Пароль, который был указан при попытке авторизации.</param>
        </member>
        <member name="M:VkNet.Exception.VkApiAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.Exception.AccessTokenInvalidException"/> на основе ранее сериализованных данных.
            </summary>
            <param name="info">Содержит все данные, необходимые для десериализации.</param>
            <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, 
            определяемый вызывающим, контекст.</param>
        </member>
        <member name="P:VkNet.Exception.VkApiAuthorizationException.Email">
            <summary>
            Логин, который был указан при попытке авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Exception.VkApiAuthorizationException.Password">
            <summary>
            Пароль, который был указан при попытке авторизации.
            </summary>
        </member>
        <member name="T:VkNet.Model.Education">
            <summary>
            Информация о высшем учебном заведении пользователя.
            См. описание <see href="http://vk.com/dev/fields"/>. Раздел education.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.UniversityId">
            <summary>
            Идентификатор университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.UniversityName">
            <summary>
            Название ВУЗа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.FacultyId">
            <summary>
            Идентификатор факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.FacultyName">
            <summary>
            Название факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.Graduation">
            <summary>
            Год окончания.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.EducationForm">
            <summary>
            Форма обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.EducationStatus">
            <summary>
            Текущий статус пользователя в высшем учебном заведении.
            </summary>
        </member>
        <member name="T:VkNet.Categories.StatusCategory">
            <summary>
            Методы для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.Get(System.Int64)">
            <summary>
            Получает статус пользователя или сообщества.
            </summary>
            <param name="uid">
            Идентификатор пользователя или сообщества, информацию о статусе которого нужно получить.
            </param>
            <returns>
            В случае успеха возвращается статус пользователдя или сообщества.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Status"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/status.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.Set(System.String,VkNet.Model.Attachments.Audio)">
            <summary>
            Устанавливает новый статус текущему пользователю. 
            </summary>
            <param name="text">
            Текст статуса, который необходимо установить текущему пользователю. Если параметр 
            равен пустой строке, то статус текущего пользователя будет очищен.
            </param>
            <param name="audio">
            Текущая аудиозапись, которую необходимо транслировать в статус, задается в формате oid_aid (
            идентификатор владельца и идентификатор аудиозаписи, разделенные знаком подчеркивания). 
            Для успешной трансляции необходимо, чтобы она была включена пользователем, в противном случае будет возвращена 
            ошибка 221 ("User disabled track name broadcast"). При указании параметра audio параметр text игнорируется.
            </param>
            <returns>Возвращает true, если статус был успешно установлен, false в противном случае.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Status"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/status.set"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.Set(VkNet.Model.Attachments.Audio)">
            <summary>
            Устанавливает новый аудиозапись текущему пользователю. 
            </summary>
            <param name="audio">
            Текущая аудиозапись, которую необходимо транслировать в статус, задается в формате oid_aid (
            идентификатор владельца и идентификатор аудиозаписи, разделенные знаком подчеркивания). 
            Для успешной трансляции необходимо, чтобы она была включена пользователем, в противном случае будет возвращена 
            ошибка 221 ("User disabled track name broadcast"). При указании параметра audio параметр text игнорируется.
            </param>
            <returns>Возвращает true, если статус был успешно установлен, false в противном случае.</returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской, содержащей <see cref="F:VkNet.Enums.Filters.Settings.Status"/>. 
            Страница документации ВКонтакте <see href="http://vk.com/dev/status.set"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Model.Status">
            <summary>
            Информация о статусе пользователя.
            См. описание <see href="http://vk.com/dev/status.get"/>.
            </summary>
        </member>
        <member name="P:VkNet.Model.Status.Text">
            <summary>
            Текст статуса.
            </summary>
        </member>
        <member name="P:VkNet.Model.Status.Audio">
            <summary>
            Информация об играющей в текущей момент у пользователя аудиокомпозиции.
            </summary>
        </member>
        <member name="T:VkNet.Categories.UsersCategory">
            <summary>
            Методы для работы с информацией о пользователях.
            </summary>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Search(System.String,System.Int32@,VkNet.Enums.Filters.ProfileFields,System.Int32,System.Int32)">
            <summary>
            Возвращает список пользователей в соответствии с заданным критерием поиска.
            </summary>
            <param name="query">Строка поискового запроса. Например, Вася Бабич.</param>
            <param name="itemsCount">Общее количество пользователей, удовлетворяющих условиям запроса.</param>
            <param name="fields">Список дополнительных полей, которые необходимо вернуть.</param>
            <param name="count">Количество возвращаемых пользователей. 
            Обратите внимание — даже при использовании параметра offset для получения информации доступны только первые 1000 результатов.         
            </param>
            <param name="offset">Смещение относительно первого найденного пользователя для выборки определенного подмножества.</param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей, найденных в соответствии с заданными критериями. 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.search"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetUserSettings(System.Int64)">
            <summary>
            Получает настройки текущего пользователя в данном приложении. .
            </summary>
            <param name="uid">идентификатор пользователя, информацию о настройках которого необходимо получить.</param>
            <returns>После успешного выполнения возвращает битовую маску настроек текущего пользователя в данном приложении. 
            
            Пример:
            Если Вы хотите получить права на Доступ к друзьям и Доступ к статусам пользователя, то Ваша битовая маска будет 
            равна: 2 + 1024 = 1026. 
            Если, имея битовую маску 1026, Вы хотите проверить, имеет ли она доступ к друзьям — Вы можете сделать 1026 &amp; 2. 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/getUserSettings"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.IsAppUser(System.Int64)">
            <summary>
            Возвращает информацию о том, установил ли пользователь приложение.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>После успешного выполнения возвращает true в случае, если пользователь установил у себя данное приложение, 
            иначе false. 
            </returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/isAppUser"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает расширенную информацию о пользователе.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="fields">Поля профиля, которые необходимо возвратить.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя</param>
            <returns>Объект, содержащий запрошенную информацию о пользователе.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/getProfiles"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает расширенную информацию о пользователях. Метод не требует авторизацию
            </summary>
            <param name="userIds">Идентификаторы пользователей, о которых необходимо получить информацию.</param>
            <param name="fields">Поля профилей, которые необходимо возвратить.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя</param>
            <returns>Список объектов с запрошенной информацией о пользователях.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает расширенную информацию о пользователях.
            </summary>
            <param name="screenNames">Короткие имена пользователей, о которых необходимо получить информацию.</param>
            <param name="fields">Поля профилей, которые необходимо возвратить.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя</param>
            <returns>Список объектов с запрошенной информацией о пользователях.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.String,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает расширенную информацию о пользователе.
            </summary>
            <param name="screenName">Короткое имя пользователя</param>
            <param name="fields">Поля профилей, которые необходимо возвратить.</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя</param>
            <returns>Объект <see cref="T:VkNet.Model.User"/> с запрошенной информацией о пользователе.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.get"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetSubscriptions(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список идентификаторов пользователей и групп, которые входят в список подписок пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя, подписки которого необходимо получить</param>
            <param name="count">Количество подписок, которые необходимо вернуть</param>
            <param name="offset">Смещение необходимое для выборки определенного подмножества подписок</param>
            <returns>Пока возвращается только список групп.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.getSubscriptions"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetFollowers(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает список идентификаторов пользователей, которые являются подписчиками пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя</param>
            <param name="count">Количество подписчиков, информацию о которых нужно получить</param>
            <param name="offset">Смещение, необходимое для выборки определенного подмножества подписчиков</param>
            <param name="fields">Список дополнительных полей, которые необходимо вернуть</param>
            <param name="nameCase">Падеж для склонения имени и фамилии пользователя</param>
            <returns>Список подписчиков</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.getFollowers"/>.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Report(System.Int64,VkNet.Enums.SafetyEnums.ReportType,System.String)">
            <summary>
            Позволяет пожаловаться на пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя, на которого осуществляется жалоба</param>
            <param name="type">Тип жалобы</param>
            <param name="comment">Комментарий к жалобе на пользователя</param>
            <returns>В случае успешной жалобы метод вернет true.</returns>
            <remarks>
            Страница документации ВКонтакте <see href="http://vk.com/dev/users.report"/>.
            </remarks>
        </member>
        <member name="T:VkNet.Model.Attachments.Video">
            <summary>
            Видеозапись пользователя или группы.
            </summary>
            <remarks>
            См. описание <see href="http://vk.com/dev/video_object"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Title">
            <summary>
            Название видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Description">
            <summary>
            Текст описания видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Duration">
            <summary>
            Длительность ролика в секундах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Link">
            <summary>
            Строка, состоящая из ключа video+vid.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo130">
            <summary>
            Url изображения-обложки ролика с размером 130x98px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo320">
            <summary>
            Url изображения-обложки ролика с размером 320x240px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo640">
            <summary>
            Url изображения-обложки ролика с размером 640x480px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Date">
            <summary>
            Дата добавления видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.ViewsCount">
            <summary>
            Количество просмотров.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CommentsCount">
            <summary>
            Количество комментариев.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Player">
            <summary>
            Адрес страницы с плеером, который можно использовать для воспроизведения ролика в браузере. 
            Поддерживается flash и html5, плеер всегда масштабируется по размеру окна.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanComment">
            <summary>
            Признак может ли текущий пользователь добавлять комментарии к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanRepost">
            <summary>
            Признак может ли текущий пользователь сделать репост данной видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Likes">
            <summary>
            Информация о лайках к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Repeat">
            <summary>
            Признак является ли видеозапись зацикленной.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.AlbumId">
            <summary>
            Идентификатор видеоальбома <see cref="T:VkNet.Model.VideoAlbum"/>, к которому относится видеозапись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.UploadUrl">
            <summary>
            Url, по которому необходимо выполнить загрузку видеов (см. метод <see cref="M:VkNet.Categories.VideoCategory.Save(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)"/>).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.AccessKey">
            <summary>
            Ключ доступа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Tag">
            <summary>
            Отметка к видеозаписи.
            </summary>
        </member>
        <member name="T:VkNet.Model.Post">
            <summary>
            Запись со стены пользователя или сообщества.
            </summary>
            <remarks>
            См. описание <see href="http://vk.com/dev/post"/>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Post.Id">
            <summary>
            Идентификатор записи на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.OwnerId">
            <summary>
            Идентификатор владельца стены, на которой размещена запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.FromId">
            <summary>
            Идентификатор автора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Date">
            <summary>
            Время публикации записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Text">
            <summary>
            Текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.ReplyOwnerId">
            <summary>
            Идентификатор владельца записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.ReplyPostId">
            <summary>
            Идентификатор записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.FriendsOnly">
            <summary>
            true, если запись была создана с опцией «Только для друзей», false в противном случае.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Comments">
            <summary>
            Информация о комментариях к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Likes">
            <summary>
            Информация о лайках к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Reposts">
            <summary>
            Информация о репостах записи («Рассказать друзьям»). 
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.PostType">
            <summary>
            Тип записи (post, copy, reply, postpone, suggest). Если PostType равен "copy", то запись является копией записи с чужой стены.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.PostSource">
            <summary>
            Информация о способе размещения записи .
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Attachments">
            <summary>
            Информация о вложениях записи (фотографии ссылки и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Attachment">
            <summary>
            Первое вложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.Geo">
            <summary>
            Информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.SignerId">
            <summary>
            Идентификатор автора, если запись была опубликована от имени сообщества и подписана пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyPostDate">
            <summary>
            Время публикации записи-оригинала (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyPostType">
            <summary>
            Тип записи-оригинала (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyOwnerId">
            <summary>
            Идентификатор владельца стены, у которого была скопирована запись (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyPostId">
            <summary>
            Идентификатор скопированной записи на стене ее владельца (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyText">
            <summary>
            Текст комментария, добавленного при копировании (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyHistory">
            <summary>
            Массив, содержащий историю репостов для записи. Возвращается только в том случае, если запись является репостом. 
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CreatedBy">
            <summary>
            Идентификатор создателя записи в группе или паблике (тот, кто фактически ее написал)
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyCommenterId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится идентификатор коментатора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CopyCommentId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится идентификатор коментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CanDelete">
            <summary>
            Признак может ли текущий пользователь удалить эту запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Post.CanEdit">
            <summary>
            Признак может ли текущий пользователь редактировать эту запись.
            </summary>
        </member>
        <member name="T:VkNet.Utils.Browser">
            <summary>
            Браузер, через который производится сетевое взаимодействие с ВКонтакте.
            Сетевое взаимодействие выполняется с помощью <see cref="T:System.Net.HttpWebRequest"/>. 
            </summary>
        </member>
        <member name="T:VkNet.Utils.IBrowser">
            <summary>
            Интерфейс браузера, с помощью которого осуществляется сетевое взаимодействие.
            Интерфейс введен с целью обеспечения возможности выполнения модульного тестирования.
            </summary>
        </member>
        <member name="M:VkNet.Utils.IBrowser.GetJson(System.String)">
            <summary>
            Выполняет JSON-запрос к ВКонтакте.
            </summary>
            <param name="url">URL, в котором закодированы параметры запроса.</param>
            <returns>Результат выполнения запроса, полученный от сервера в формате JSON.</returns>
        </member>
        <member name="M:VkNet.Utils.IBrowser.Authorize(System.Int32,System.String,System.String,VkNet.Enums.Filters.Settings,System.Func{System.String},System.Nullable{System.Int64},System.String)">
            <summary>
            Выполняет авторизацию ВКонтакте. 
            Если приложение с идентификатором <paramref name="appId"/> не было установлено у пользователя, имеющего 
            логин <paramref name="email"/>, то производится его установка с разрешениями <paramref name="settings"/>.
            </summary>
            <param name="appId">Идентификатор авторизуемого приложения.</param>
            <param name="email">Логин пользователя ВКонтакте (его почта).</param>
            <param name="password">Пароль пользователя.</param>
            <param name="settings">Запрашиваемые для работы разрешения.</param>
            <param name="code">Провайдер кода для двухфакторной авторизации.</param>
            <param name="captchaSid">Индентификатор капчи</param>
            <param name="captchaKey">Текст капчи.</param>
            <returns>
            Информация об авторизации приложения.
            </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.GetJson(System.String)">
            <summary>
            Получение json по url-адресу
            </summary>
            <param name="url">Адрес получения json</param>
            <returns>Строка в формате json</returns>
        </member>
        <member name="M:VkNet.Utils.Browser.UploadFile(System.String,System.String)">
            <summary>
            Загружает файл на заданный Url
            </summary>
            <param name="uploadUrl">Адрес для загрузки</param>
            <param name="path">Путь к файлу</param>
            <returns>Cтрока, используемая далее в Vk API</returns>
        </member>
        <member name="M:VkNet.Utils.Browser.DownloadFile(System.String,System.String)">
            <summary>
            Скачивает файл по заданному Url
            </summary>
            <param name="url">Url для скачки</param>
            <param name="path">Путь сохранения файла</param>
        </member>
        <member name="M:VkNet.Utils.Browser.Authorize(System.Int32,System.String,System.String,VkNet.Enums.Filters.Settings,System.Func{System.String},System.Nullable{System.Int64},System.String)">
            <summary>
            Авторизация на сервере ВК
            </summary>
            <param name="appId">Идентификатор приложения</param>
            <param name="email">Логин - телефон или эл. почта</param>
            <param name="password">Пароль</param>
            <param name="settings">Уровень доступа приложения</param>
            <param name="captcha_sid">Идентификатор капчи</param>
            <param name="captcha_key">Текст капчи</param>
            <returns>Информация об авторизации приложения</returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.GetNullableLongId(VkNet.Utils.VkResponse)">
            <summary>
            Получение идентификатора.
            
            Применять когда id может быть задано как строкой так и числом в json'e.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:VkNet.VkApiDelegate">
            <summary>
            Служит для оповещения об истечении токена
            </summary>
            <param name="api">Экземпляр API у которого истекло время токена</param>
        </member>
        <member name="T:VkNet.VkApi">
            <summary>
            API для работы с ВКонтакте. Выступает в качестве фабрики для различных категорий API (например, для работы с пользователями, 
            группами и т.п.).
            </summary>
        </member>
        <member name="M:VkNet.VkApi.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:VkNet.VkApi"/>.
            </summary>
        </member>
        <member name="M:VkNet.VkApi.Authorize(System.Int32,System.String,System.String,VkNet.Enums.Filters.Settings,System.Func{System.String},System.Nullable{System.Int64},System.String)">
            <summary>
            Authorize application on vk.com and getting Access Token.
            </summary>
            <param name="appId">Appliation Id</param>
            <param name="emailOrPhone">Email or Phone</param>
            <param name="password">Password</param>
            <param name="code">Делегат получения кода для двухфакторной авторизации</param>
            <param name="captchaSid">Идентикикатор капчи</param>
            <param name="captchaKey">Текст капчи</param>
            <param name="settings">Access rights requested by your application</param>
        </member>
        <member name="M:VkNet.VkApi.Authorize(System.String,System.Nullable{System.Int64})">
            <summary>
            Выполняет авторизацию с помощью маркера доступа (access token), полученного извне.
            </summary>
            <param name="accessToken">Маркер доступа, полученный извне.</param>
            <param name="userId">Идентификатор пользователя, установившего приложение (необязательный параметр).</param>
        </member>
        <member name="M:VkNet.VkApi.RefreshToken(System.Func{System.String})">
            <summary>
            Получает новый AccessToken использую логин, пароль, приложение и настройки указанные при последней авторизации.
            </summary>
        </member>
        <member name="M:VkNet.VkApi._stopTimer">
            <summary>
            Прекращает работу таймера оповещения
            </summary>
        </member>
        <member name="M:VkNet.VkApi._alertExpires(System.Object)">
            <summary>
            Создает событие оповещения об окончании времени токена
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:VkNet.VkApi.Invoke(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Прямой вызов API-метода
            </summary>
            <param name="methodName">Название метода. Например, "wall.get".</param>
            <param name="parameters">Вход. параметры метода.</param>
            <param name="skipAuthorization">Флаг, что метод можно вызывать без авторизации.</param>
            <returns>Ответ сервера в формате JSON.</returns>
        </member>
        <member name="P:VkNet.VkApi.LastInvokeTime">
            <summary>
            Время вызова последнего метода этим объектом
            </summary>
        </member>
        <member name="P:VkNet.VkApi.LastInvokeTimeSpan">
            <summary>
            Время, прошедшее с момента последнего обращения к API этим объектом
            </summary>
        </member>
        <member name="P:VkNet.VkApi.RequestsPerSecond">
            <summary>
            Ограничение на кол-во запросов в секунду
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Users">
            <summary>
            API для работы с пользователями.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Friends">
            <summary>
            API для работы с друзьями.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Status">
            <summary>
            API для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Messages">
            <summary>
            API для работы с сообщениями.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Groups">
            <summary>
            API для работы с .
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Audio">
            <summary>
            API для работы с аудиозаписями.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Database">
            <summary>
            API для получения справочной информации (страны, города, школы, учебные заведения и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Utils">
            <summary>
            API для работы со служебными методами.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Wall">
            <summary>
            API для работы со стеной пользователя.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Fave">
            <summary>
            API для работы с закладками.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Video">
            <summary>
            API для работы с видеофайлами.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Account">
            <summary>
            API для работы с аккаунтом пользователя.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Photo">
            <summary>
            API для работы с фотографиями
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Docs">
            <summary>
            API для работы с документами
            </summary>
        </member>
        <member name="P:VkNet.VkApi.Likes">
            <summary>
            API для работы с лайками
            </summary>
        </member>
        <member name="P:VkNet.VkApi.AccessToken">
            <summary>
            Токен для доступа к методам API
            </summary>
        </member>
        <member name="P:VkNet.VkApi.UserId">
            <summary>
            Идентификатор пользователя, от имени которого была проведена авторизация.
            Если авторизация не была произведена с использованием метода <see cref="!:Authorize(int,string,string,Settings,long?,string)"/>, 
            то возвращается null.
            </summary>
        </member>
        <member name="T:VkNet.Utils.VkAuthorization">
            <summary>
            Информация об авторизации приложения на действия.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkAuthorization.From(System.Uri)">
            <summary>
            Извлекает из URL, на которую произошло перенаправление при авторизации, информацию об авторизации.
            </summary>
            <param name="responseUrl">
            URL, на которую произошло перенаправление при авторизации.
            </param>
            <returns>Информация об авторизации.</returns>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.IsAuthorized">
            <summary>
            Возвращает признак была ли авторизация успешной.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.IsAuthorizationRequired">
            <summary>
            Проверяет требуется ли получения у авторизации на запрошенные приложением действия (при установке приложения пользователю).
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.AccessToken">
            <summary>
            Маркер доступа, который необходимо использовать для доступа к API ВКонтакте.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.ExpiresIn">
            <summary>
            Время истечения срока действия маркера доступа.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.UserId">
            <summary>
            Идентификатор пользователя, у которого работает приложение (от имени которого был произведен вход).
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization.CaptchaID">
            <summary>
            ID капчи, если она появилась
            </summary>
        </member>
    </members>
</doc>
